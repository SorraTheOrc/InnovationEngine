(function(e,S){typeof exports=="object"&&typeof module<"u"?S(require("react/jsx-runtime"),require("@kinvolk/headlamp-plugin/lib"),require("@kinvolk/headlamp-plugin/lib/CommonComponents"),require("@mui/material/Typography"),require("react"),require("@mui/material"),require("@mui/material/utils")):typeof define=="function"&&define.amd?define(["react/jsx-runtime","@kinvolk/headlamp-plugin/lib","@kinvolk/headlamp-plugin/lib/CommonComponents","@mui/material/Typography","react","@mui/material","@mui/material/utils"],S):(e=typeof globalThis<"u"?globalThis:e||self,S(e.pluginLib.ReactJSX,e.pluginLib,e.pluginLib.CommonComponents,e.pluginLib.MuiMaterial.Typography,e.pluginLib.React,e.pluginLib.MuiMaterial,e.pluginLib.MuiMaterial.utils))})(this,function(e,S,U,ee,B,h,te){"use strict";const _=t=>t&&typeof t=="object"&&"default"in t?t:{default:t},p=_(ee),f=_(B),re=te.createSvgIcon(e.jsx("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m1 17h-2v-2h2zm2.07-7.75-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25"}),"Help"),J=(t,r={})=>{const{enabled:u=!0,preventDefault:i=!0}=r,l=B.useCallback(d=>{if(!u)return;const{ctrlKey:v,metaKey:b,shiftKey:g,altKey:c,key:s}=d,x=v||b;if(x&&!g&&!c)switch(s.toLowerCase()){case"s":if(t.onSave){i&&d.preventDefault(),t.onSave();return}break;case"n":if(t.onNew){i&&d.preventDefault(),t.onNew();return}break;case"o":if(t.onOpen){i&&d.preventDefault(),t.onOpen();return}break;case"z":if(t.onUndo){i&&d.preventDefault(),t.onUndo();return}break;case"y":if(t.onRedo){i&&d.preventDefault(),t.onRedo();return}break;case"c":if(t.onCopy){const w=d.target;if(!["INPUT","TEXTAREA"].includes(w.tagName)){i&&d.preventDefault(),t.onCopy();return}}break;case"v":if(t.onPaste){const w=d.target;if(!["INPUT","TEXTAREA"].includes(w.tagName)){i&&d.preventDefault(),t.onPaste();return}}break;case"x":if(t.onCut){const w=d.target;if(!["INPUT","TEXTAREA"].includes(w.tagName)){i&&d.preventDefault(),t.onCut();return}}break;case"f":if(t.onFind){i&&d.preventDefault(),t.onFind();return}break}if(x&&g&&!c&&s.toLowerCase()==="z"&&t.onRedo){i&&d.preventDefault(),t.onRedo();return}if(!x&&!g&&!c)switch(s){case"F2":if(t.onToggleEdit){i&&d.preventDefault(),t.onToggleEdit();return}break;case"F5":if(t.onRunCurrent){i&&d.preventDefault(),t.onRunCurrent();return}break;case"F1":if(t.onToggleAssistant){i&&d.preventDefault(),t.onToggleAssistant();return}break}if(c&&!x&&!g)switch(s){case"ArrowUp":if(t.onFocusPrevStep){i&&d.preventDefault(),t.onFocusPrevStep();return}break;case"ArrowDown":if(t.onFocusNextStep){i&&d.preventDefault(),t.onFocusNextStep();return}break}if(x&&c&&!g)switch(s.toLowerCase()){case"n":if(t.onNewStep){i&&d.preventDefault(),t.onNewStep();return}break;case"delete":case"backspace":if(t.onDeleteStep){i&&d.preventDefault(),t.onDeleteStep();return}break;case"arrowup":if(t.onMoveStepUp){i&&d.preventDefault(),t.onMoveStepUp();return}break;case"arrowdown":if(t.onMoveStepDown){i&&d.preventDefault(),t.onMoveStepDown();return}break}},[t,u,i]);return B.useEffect(()=>{if(u)return document.addEventListener("keydown",l),()=>{document.removeEventListener("keydown",l)}},[l,u]),{shortcuts:{"Ctrl+S / Cmd+S":"Save document","Ctrl+N / Cmd+N":"Create new document","Ctrl+O / Cmd+O":"Open document","Ctrl+Z / Cmd+Z":"Undo","Ctrl+Y / Cmd+Y":"Redo","Ctrl+Shift+Z / Cmd+Shift+Z":"Redo (alternative)","Ctrl+C / Cmd+C":"Copy (when not in input field)","Ctrl+V / Cmd+V":"Paste (when not in input field)","Ctrl+X / Cmd+X":"Cut (when not in input field)","Ctrl+F / Cmd+F":"Find",F1:"Toggle AI Assistant",F2:"Toggle edit mode",F5:"Run current step","Alt+↑":"Focus previous step","Alt+↓":"Focus next step","Ctrl+Alt+N / Cmd+Alt+N":"Add new step","Ctrl+Alt+Delete / Cmd+Alt+Delete":"Delete current step","Ctrl+Alt+↑ / Cmd+Alt+↑":"Move step up","Ctrl+Alt+↓ / Cmd+Alt+↓":"Move step down"}}},oe=({step:t,onStepChange:r,onRunStep:u,currentContext:i,currentNamespace:l,isFocused:d=!1})=>{const[v,b]=f.default.useState(!1),[g,c]=f.default.useState(""),[s,x]=f.default.useState(!1),[w,E]=f.default.useState([]),T=()=>{u(t.id)},K=o=>{r({...t,title:o.target.value})},H=o=>{r({...t,description:o.target.value})},W=o=>{r({...t,code:o.target.value})},k=o=>{const C=o.target.checked;r({...t,isCodeBlock:C,code:C&&!t.code?"":t.code})},L=o=>{r({...t,isExpanded:o.target.checked})},F=()=>{r({...t,executed:!1,executionStatus:null,executionOutput:void 0})};J({onToggleEdit:()=>{b(!v)},onToggleAssistant:()=>{x(!s)},onRunCurrent:()=>{T()}},{enabled:d});const I=()=>{g.trim()&&(E(o=>[...o,{role:"user",content:g}]),setTimeout(()=>{E(o=>[...o,{role:"assistant",content:`Here's my suggestion for your request: "${g}". This is a placeholder response that would be generated by GitHub Copilot in the actual implementation.`}]),c("")},1e3))},Y=o=>{const C=()=>{r({...t,description:t.description+`

`+o.content}),x(!1)},$=()=>{r({...t,code:(t.code||"")+`

`+o.content,isCodeBlock:!0}),x(!1)},M=o.content.includes("```")||/\b(function|const|let|var|import|export|class|if|for|while)\b/.test(o.content);t.isCodeBlock&&M?$():(t.isCodeBlock,C())},N=()=>{if(!t.executed)return null;let o="",C="";switch(t.executionStatus){case"success":o="#4caf50",C="Success";break;case"failure":o="#f44336",C="Failed";break;case"running":o="#2196f3",C="Running...";break;default:return null}return e.jsx("span",{style:{backgroundColor:o,color:"white",padding:"3px 8px",borderRadius:"12px",fontSize:"12px",marginLeft:"10px"},children:C})},O=()=>{const o="default",C=l;return i!==o?e.jsx("div",{style:{marginTop:"10px",padding:"8px",backgroundColor:"#fff3cd",borderRadius:"4px"},children:e.jsxs(p.default,{variant:"body2",style:{color:"#856404"},children:['⚠️ This step may require the "',o,'" context and "',C,`" namespace, but you're currently in context "`,i,'".']})}):null};return e.jsxs("div",{style:{border:d?"2px solid #1976d2":"1px solid #e0e0e0",borderRadius:"8px",marginBottom:"20px",backgroundColor:d?"#f3f8ff":"white",boxShadow:d?"0 2px 8px rgba(25, 118, 210, 0.15)":"none",transition:"all 0.2s ease-in-out",overflow:"hidden"},children:[e.jsxs("div",{style:{padding:"12px 16px",backgroundColor:"#f5f5f5",display:"flex",justifyContent:"space-between",alignItems:"center",borderBottom:"1px solid #ddd"},children:[v?e.jsx("input",{type:"text",value:t.title,onChange:K,style:{fontSize:"18px",fontWeight:"bold",padding:"8px",width:"60%",borderRadius:"4px",border:"1px solid #ddd"},placeholder:"Step title"}):e.jsxs("div",{style:{display:"flex",alignItems:"center"},children:[e.jsx(p.default,{variant:"h6",style:{margin:0},children:t.title}),N(),t.isCodeBlock&&e.jsxs("span",{style:{backgroundColor:"#e0f7fa",color:"#00838f",padding:"2px 8px",borderRadius:"12px",fontSize:"12px",marginLeft:"10px",display:"flex",alignItems:"center"},children:[e.jsx("span",{style:{marginRight:"4px"},children:"⚙️"}),"Executable"]})]}),e.jsxs("div",{children:[e.jsx("button",{onClick:()=>b(!v),style:{marginRight:"8px",padding:"6px 12px",backgroundColor:v?"#1976d2":"#f0f0f0",color:v?"white":"black",border:"1px solid "+(v?"#1976d2":"#ddd"),borderRadius:"4px",cursor:"pointer",fontWeight:v?"bold":"normal"},children:v?"Save Changes":"Edit Step"}),e.jsx("button",{onClick:()=>x(!s),style:{marginRight:"8px",padding:"6px 12px",backgroundColor:s?"#9c27b0":"#f0f0f0",color:s?"white":"black",border:"1px solid "+(s?"#9c27b0":"#ddd"),borderRadius:"4px",cursor:"pointer"},children:s?"Hide Help":"Get Help"}),t.isCodeBlock&&e.jsxs("button",{onClick:T,disabled:t.executionStatus==="running","aria-label":`Run step ${t.title}`,style:{padding:"6px 12px",backgroundColor:"#4caf50",color:"white",border:"none",borderRadius:"4px",cursor:t.executionStatus==="running"?"not-allowed":"pointer",opacity:t.executionStatus==="running"?.7:1,display:"inline-flex",alignItems:"center"},children:[e.jsx("span",{style:{marginRight:"4px"},children:"▶️"}),t.executionStatus==="running"?"Running...":"Run"]})]})]}),e.jsxs("div",{style:{padding:"16px"},children:[O(),v?e.jsxs("div",{children:[e.jsxs("div",{style:{display:"flex",flexWrap:"wrap",gap:"16px",marginBottom:"16px",padding:"12px",backgroundColor:"#f5f5f5",borderRadius:"4px"},children:[e.jsxs("label",{style:{display:"flex",alignItems:"center",cursor:"pointer"},children:[e.jsx("input",{type:"checkbox",checked:t.isCodeBlock,onChange:o=>k(o),style:{marginRight:"8px"}}),e.jsx("span",{children:"Contains executable code"})]}),e.jsxs("label",{style:{display:"flex",alignItems:"center",cursor:"pointer"},children:[e.jsx("input",{type:"checkbox",checked:t.isExpanded,onChange:o=>L(o),style:{marginRight:"8px"}}),e.jsx("span",{children:"Expanded by default"})]}),t.executed&&e.jsx("button",{onClick:F,style:{padding:"4px 8px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:"Reset Execution Status"})]}),e.jsx(p.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Description:"}),e.jsx("textarea",{value:t.description,onChange:H,onKeyDown:o=>{o.key==="Enter"&&(o.ctrlKey||o.metaKey)&&(o.preventDefault(),b(!1))},placeholder:"Enter description for this step. Press CTRL+ENTER to save changes.",style:{width:"100%",minHeight:"200px",padding:"8px",marginBottom:"16px",borderRadius:"4px",border:"1px solid #ddd",fontSize:"14px",lineHeight:"1.5"}}),t.isCodeBlock&&e.jsxs("div",{children:[e.jsx(p.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Code:"}),e.jsx("textarea",{value:t.code||"",onChange:W,onKeyDown:o=>{o.key==="Enter"&&(o.ctrlKey||o.metaKey)&&(o.preventDefault(),b(!1))},style:{width:"100%",minHeight:"250px",padding:"8px",fontFamily:"monospace",backgroundColor:"#f8f8f8",borderRadius:"4px",border:"1px solid #ddd",fontSize:"14px",lineHeight:"1.5"},placeholder:"Enter executable code here. Press CTRL+ENTER to save changes."}),e.jsx(p.default,{variant:"caption",color:"textSecondary",style:{display:"block",marginTop:"4px"},children:"This code will be executed when the user runs this step."})]})]}):e.jsxs("div",{children:[e.jsx(p.default,{variant:"body1",style:{whiteSpace:"pre-wrap",marginBottom:"16px"},children:t.description}),t.isCodeBlock&&t.code&&e.jsx("div",{style:{backgroundColor:"#f8f8f8",padding:"12px",borderRadius:"4px",marginBottom:"16px",overflowX:"auto"},children:e.jsx("pre",{style:{margin:0,fontFamily:"monospace"},children:t.code})})]}),t.executed&&t.executionOutput&&e.jsxs("div",{style:{backgroundColor:"#f8f8f8",padding:"12px",borderRadius:"4px",marginTop:"16px",border:"1px solid #ddd"},children:[e.jsx(p.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Output:"}),e.jsx("pre",{style:{margin:0,fontFamily:"monospace",whiteSpace:"pre-wrap"},children:t.executionOutput})]})]}),s&&e.jsxs("div",{style:{padding:"16px",borderTop:"1px solid #e0e0e0"},children:[e.jsx(p.default,{variant:"h6",style:{marginBottom:"12px"},children:"Copilot Assistance"}),e.jsx("div",{style:{maxHeight:"200px",overflowY:"auto",marginBottom:"16px",padding:"8px",border:"1px solid #e0e0e0",borderRadius:"4px",backgroundColor:"#f9f9f9"},children:w.map((o,C)=>e.jsx("div",{style:{marginBottom:"10px",textAlign:o.role==="user"?"right":"left"},children:e.jsxs("div",{style:{display:"inline-block",maxWidth:"80%",padding:"10px",borderRadius:"8px",backgroundColor:o.role==="user"?"#1976d2":"#ffffff",color:o.role==="user"?"white":"black",boxShadow:"0 1px 2px rgba(0,0,0,0.1)",border:o.role==="assistant"?"1px solid #e0e0e0":"none"},children:[e.jsx(p.default,{children:o.content}),o.role==="assistant"&&e.jsxs("div",{style:{marginTop:"8px",display:"flex",flexWrap:"wrap",gap:"8px"},children:[e.jsx("button",{onClick:()=>Y(o),style:{padding:"4px 8px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:"pointer",fontSize:"12px"},children:"Apply Suggestion"}),t.isCodeBlock&&e.jsxs("div",{style:{display:"flex",gap:"4px"},children:[e.jsx("button",{onClick:()=>{r({...t,description:t.description+`

`+o.content}),x(!1)},style:{padding:"4px 8px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px 0 0 4px",cursor:"pointer",fontSize:"12px"},children:"Apply to Description"}),e.jsx("button",{onClick:()=>{r({...t,code:(t.code||"")+`

`+o.content}),x(!1)},style:{padding:"4px 8px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"0 4px 4px 0",cursor:"pointer",fontSize:"12px"},children:"Apply to Code"})]})]})]})},C))}),e.jsxs("div",{style:{display:"flex",gap:"8px"},children:[e.jsx("textarea",{value:g,onChange:o=>c(o.target.value),onKeyDown:o=>{o.key==="Enter"&&(o.ctrlKey||o.metaKey)&&g.trim()&&(o.preventDefault(),I())},placeholder:"Ask for help with this step (e.g., 'Help me improve the code for this step'). Press CTRL+ENTER to submit.",style:{flexGrow:1,padding:"8px",borderRadius:"4px",border:"1px solid #ddd",minHeight:"150px",fontSize:"14px",lineHeight:"1.5"}}),e.jsx("button",{onClick:I,disabled:!g.trim(),style:{alignSelf:"flex-end",padding:"8px 16px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:g.trim()?"pointer":"not-allowed",opacity:g.trim()?1:.7},children:"Ask Copilot"})]})]})]})},R={serverBaseUrl:"http://localhost:4001",async generateOverview(t){console.log(`Generating overview for topic: "${t}" using server at ${this.serverBaseUrl}`);try{const r=await fetch(`${this.serverBaseUrl}/api/overview`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({topic:t})});if(!r.ok)try{const u=r.headers.get("content-type");if(u&&u.includes("application/json")){const i=await r.json();throw new Error(i.error||"Failed to generate overview")}else{const i=await r.text();throw new Error(`Server error: ${r.status} - ${i.substring(0,100)}...`)}}catch(u){throw new Error(`Failed to generate overview: ${u.message}`)}try{return(await r.json()).overview||"No overview generated"}catch{const i=await r.clone().text();throw new Error(`Invalid JSON response: ${i.substring(0,100)}...`)}}catch(r){throw console.error("Error in generateOverview:",r),r}},async sendAssistantQuery(t){const r=await fetch(`${this.serverBaseUrl}/api/assistant`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({messages:t})});if(!r.ok)try{const i=r.headers.get("content-type");if(i&&i.includes("application/json")){const l=await r.json();throw new Error(l.error||"Failed to get response from assistant")}else{const l=await r.text();throw new Error(`Server error: ${r.status} - ${l.substring(0,100)}...`)}}catch(i){throw new Error(`Failed to get response from assistant: ${i.message}`)}return(await r.json()).response||"No response generated"},async executeCommand(t){const r=await fetch(`${this.serverBaseUrl}/api/exec`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({command:t})});if(!r.ok){const u=await r.json();throw new Error(u.error||"Failed to execute command")}return await r.json()}},ne=({initialOverview:t="",onSaveOverview:r,onGenerateSteps:u,authoringPhase:i="create-overview"})=>{const[l,d]=f.default.useState(t),[v,b]=f.default.useState(!1),[g,c]=f.default.useState(""),[s,x]=f.default.useState(!1),[w,E]=f.default.useState(null),[T,K]=f.default.useState(!1),[H,W]=f.default.useState([]),[k,L]=f.default.useState(""),[F,q]=f.default.useState(70),[P,j]=f.default.useState(!1),I=f.default.useRef(null);f.default.useEffect(()=>{const n=()=>{I.current&&(I.current.style.display="grid")};return window.addEventListener("resize",n),n(),()=>{window.removeEventListener("resize",n)}},[]);const Y=()=>{r(l),u()},N=()=>{k.trim()&&(W(n=>[...n,{role:"user",content:k}]),setTimeout(()=>{W(n=>[...n,{role:"assistant",content:`Here are my thoughts about your overview based on your request: "${k}". This is a placeholder response that would be generated by GitHub Copilot in the actual implementation.`}]),L("")},1e3))},O=async()=>{if(g.trim()){x(!0),E(null);try{const n=`Kubernetes executable document for: ${g}`,m=await R.generateOverview(n);d(m),c(""),b(!0)}catch(n){E(n.message||"An error occurred while generating the overview")}finally{x(!1)}}},o=n=>{if(n.role==="assistant"){let m=n.content;m=m.replace(/Here are my thoughts about your overview based on your request: "[^"]*"\. /,""),m=m.replace("This is a placeholder response that would be generated by GitHub Copilot in the actual implementation.",""),d(A=>{const z=A.trim()?`

`:"";return A.trim()+z+m.trim()}),v||b(!0)}},C=n=>{n.preventDefault(),j(!0);const m=z=>{const X=document.getElementById("overview-authoring-container");if(X){const Z=X.getBoundingClientRect(),V=(z.clientX-Z.left)/Z.width*100;V>30&&V<70&&q(V)}},A=()=>{j(!1),document.removeEventListener("mousemove",m),document.removeEventListener("mouseup",A)};document.addEventListener("mousemove",m),document.addEventListener("mouseup",A)},$=()=>{K(n=>!n)},M=()=>{switch(i){case"create-overview":return"Generate Steps";default:return"Generate Steps"}};return e.jsxs("div",{style:{display:"flex",flexDirection:"column",height:"100%"},children:[e.jsx(p.default,{variant:"h5",style:{marginBottom:"16px"},children:"Create & Edit Document Overview"}),e.jsx("div",{style:{padding:"8px 12px",backgroundColor:"#f0f9ff",borderLeft:"4px solid #1976d2",marginBottom:"16px"},children:e.jsx(p.default,{variant:"body2",children:i==="create-overview"?"Step 1: Create an overview that describes what this document will accomplish.":"Step 2: Refine your overview to ensure it accurately describes the intended workflow."})}),e.jsxs("div",{style:{padding:"12px",backgroundColor:"#e3f2fd",borderRadius:"4px",marginBottom:"16px",border:"1px solid #bbdefb"},children:[e.jsx(p.default,{variant:"subtitle1",style:{fontWeight:"bold",marginBottom:"8px"},children:"Generate with Azure AI"}),e.jsx(p.default,{variant:"body2",style:{marginBottom:"12px"},children:"Use Azure OpenAI to generate an architectural overview for your document."}),e.jsxs("div",{style:{display:"flex",gap:"8px",marginBottom:"12px"},children:[e.jsx("div",{style:{flex:1},children:e.jsx("input",{type:"text",value:g,onChange:n=>c(n.target.value),onKeyDown:n=>{n.key==="Enter"&&g.trim()&&!s&&(n.preventDefault(),O())},placeholder:"E.g., Kubernetes Deployment with Service Mesh (Press ENTER to generate)",style:{width:"100%",padding:"8px 12px",border:"1px solid #ccc",borderRadius:"4px",fontSize:"14px"},disabled:s})}),e.jsx("button",{onClick:O,disabled:s||!g.trim(),style:{padding:"8px 16px",backgroundColor:"#0078d4",color:"white",border:"none",borderRadius:"4px",cursor:s||!g.trim()?"not-allowed":"pointer",opacity:s||!g.trim()?.7:1},children:s?"Generating...":"Generate Overview"})]}),e.jsxs("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"center",marginTop:"8px"},children:[e.jsx("div",{children:w&&e.jsx("div",{style:{padding:"8px",backgroundColor:"#ffebee",border:"1px solid #ffcdd2",borderRadius:"4px",color:"#c62828"},children:e.jsx(p.default,{variant:"body2",children:w})})}),l.trim()&&e.jsx("button",{onClick:Y,disabled:!l.trim(),style:{padding:"8px 16px",backgroundColor:"#4caf50",color:"white",border:"none",borderRadius:"4px",cursor:l.trim()?"pointer":"not-allowed",opacity:l.trim()?1:.7,fontWeight:"bold"},children:M()})]})]}),e.jsxs("div",{id:"overview-authoring-container",ref:I,style:{flex:1,display:"grid",gridTemplateColumns:`${F}% 6px calc(${100-F-.6}%)`,gridTemplateRows:"1fr",overflow:"hidden",position:"relative",minHeight:"600px"},children:[e.jsx("div",{style:{height:"100%",display:"flex",flexDirection:"column",overflow:"hidden"},children:e.jsxs("div",{style:{display:"flex",flexDirection:"column",height:"100%"},children:[e.jsxs("div",{style:{marginBottom:"16px",display:"flex",justifyContent:"space-between"},children:[e.jsx(p.default,{variant:"subtitle1",children:v?"Edit Overview":"Preview Overview"}),e.jsx("div",{children:e.jsx("button",{onClick:()=>b(!v),style:{padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:v?"Preview":"Edit"})})]}),e.jsx("div",{style:{flex:1,display:"flex",flexDirection:"column",border:"1px solid #e0e0e0",borderRadius:"4px",padding:"12px",backgroundColor:"#ffffff",overflowY:"auto"},children:v?e.jsx("textarea",{value:l,onChange:n=>d(n.target.value),onKeyDown:n=>{n.key==="Enter"&&(n.ctrlKey||n.metaKey)&&l.trim()&&(n.preventDefault(),b(!1))},placeholder:"Enter your document overview content. Press CTRL+ENTER to save changes.",style:{width:"100%",height:"100%",padding:"8px",borderRadius:"4px",border:"1px solid #ddd",fontFamily:"monospace",fontSize:"14px",lineHeight:"1.5",resize:"none"}}):e.jsx("div",{style:{padding:"16px",flex:1,maxWidth:"800px",margin:"0 auto",fontFamily:"system-ui, -apple-system, sans-serif",lineHeight:1.6,overflow:"auto"},children:l.split(`
`).map((n,m)=>n.startsWith("# ")?e.jsx(p.default,{variant:"h4",style:{marginBottom:"16px"},children:n.substring(2)},m):n.startsWith("## ")?e.jsx(p.default,{variant:"h5",style:{marginTop:"24px",marginBottom:"12px"},children:n.substring(3)},m):n.startsWith("- ")?e.jsx(p.default,{component:"li",style:{marginLeft:"20px",marginBottom:"8px"},children:n.substring(2)},m):n===""?e.jsx("br",{},m):e.jsx(p.default,{paragraph:!0,children:n},m))})})]})}),e.jsx("div",{role:"separator","aria-orientation":"vertical","aria-label":"Resize panels",style:{width:"6px",height:"100%",background:"#e0e0e0",cursor:"col-resize",userSelect:"none",transition:P?"none":"background 0.2s",position:"relative"},onMouseDown:C,onKeyDown:n=>{if(n.key==="ArrowLeft"||n.key==="ArrowRight"){n.preventDefault();const m=n.key==="ArrowLeft"?-2:2,A=F+m;A>30&&A<70&&q(A)}},onFocus:n=>{n.currentTarget.style.background="#1976d2",n.currentTarget.style.outline="2px solid #1976d2"},onBlur:n=>{n.currentTarget.style.background="#e0e0e0",n.currentTarget.style.outline="none"},children:e.jsx("div",{style:{position:"absolute",left:"50%",top:"50%",transform:"translate(-50%, -50%)",height:"30px",width:"4px",background:P?"#1976d2":"#aaa",borderRadius:"2px"}})}),e.jsxs("div",{style:{height:"100%",display:T?"none":"flex",flexDirection:"column",overflow:"hidden",padding:"8px",backgroundColor:"#fafafa",borderLeft:"1px solid #e0e0e0"},children:[e.jsxs("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"center",marginBottom:"12px"},children:[e.jsx(p.default,{variant:"h6",children:"Copilot Assistance"}),e.jsx("button",{onClick:$,"aria-label":"Collapse Copilot assistance panel",title:"Collapse Copilot assistance panel",style:{padding:"3px 6px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",fontSize:"12px",cursor:"pointer"},children:"Collapse"})]}),e.jsxs("div",{style:{flex:1,display:"flex",flexDirection:"column",overflowY:"auto",marginBottom:"16px",padding:"8px",border:"1px solid #e0e0e0",borderRadius:"4px",backgroundColor:"#f9f9f9"},children:[H.length===0&&e.jsx(p.default,{color:"textSecondary",align:"center",style:{marginTop:"20px"},children:"Ask Copilot for help with improving your overview"}),H.map((n,m)=>e.jsx("div",{style:{marginBottom:"10px",textAlign:n.role==="user"?"right":"left"},children:e.jsxs("div",{style:{display:"inline-block",maxWidth:"80%",padding:"10px",borderRadius:"8px",backgroundColor:n.role==="user"?"#1976d2":"#ffffff",color:n.role==="user"?"white":"black",boxShadow:"0 1px 2px rgba(0,0,0,0.1)",border:n.role==="assistant"?"1px solid #e0e0e0":"none"},children:[e.jsx(p.default,{children:n.content}),n.role==="assistant"&&e.jsx("div",{style:{marginTop:"8px",display:"flex",flexWrap:"wrap",gap:"8px"},children:e.jsx("button",{onClick:()=>o(n),style:{padding:"4px 8px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:"pointer",fontSize:"12px"},children:"Apply Suggestion"})})]})},m))]}),e.jsxs("div",{style:{display:"flex",flexDirection:"column",gap:"8px"},children:[e.jsx("textarea",{value:k,onChange:n=>L(n.target.value),onKeyDown:n=>{n.key==="Enter"&&(n.ctrlKey||n.metaKey)&&k.trim()&&(n.preventDefault(),N())},placeholder:"Ask Copilot for help with your overview (e.g., 'Could you suggest a better structure for this overview?'). Press CTRL+ENTER to submit.",style:{width:"100%",padding:"8px",borderRadius:"4px",border:"1px solid #ddd",minHeight:"100px",fontSize:"14px",lineHeight:"1.5",fontFamily:"monospace"}}),e.jsx("button",{onClick:N,disabled:!k.trim(),style:{alignSelf:"flex-end",padding:"8px 16px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:k.trim()?"pointer":"not-allowed",opacity:k.trim()?1:.7},children:"Ask Copilot"})]})]}),T&&e.jsx("div",{style:{position:"absolute",right:"0",top:"50%",transform:"translateY(-50%)",zIndex:1},children:e.jsx("button",{onClick:$,"aria-label":"Open Copilot assistance panel",title:"Open Copilot assistance panel",style:{padding:"8px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px 0 0 4px",cursor:"pointer",boxShadow:"-2px 0 4px rgba(0,0,0,0.1)"},children:"≪ Open Copilot"})})]})]})},ie=({execDoc:t,onSave:r,onLoad:u,onExport:i,autoSaveEnabled:l,onToggleAutoSave:d,autoSaveInterval:v,onChangeAutoSaveInterval:b,recentFiles:g,onOpenRecentFile:c})=>{const s=()=>{t&&r(t)},x=w=>{b(parseInt(w.target.value,10))};return e.jsxs("div",{style:{borderBottom:"1px solid #e0e0e0",paddingBottom:"16px",marginBottom:"16px"},children:[e.jsx(p.default,{variant:"h6",style:{marginBottom:"12px"},children:"File Operations"}),e.jsxs("div",{style:{display:"flex",flexWrap:"wrap",gap:"10px"},children:[e.jsx("button",{onClick:s,disabled:!t,style:{padding:"8px 16px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:t?"pointer":"not-allowed",opacity:t?1:.7},children:"Save to Disk"}),e.jsx("button",{onClick:u,style:{padding:"8px 16px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:"Load from Disk"}),e.jsxs("div",{style:{display:"flex",alignItems:"center"},children:[e.jsxs("label",{style:{marginRight:"8px",display:"flex",alignItems:"center"},children:[e.jsx("input",{type:"checkbox",checked:l,onChange:d,style:{marginRight:"4px"}}),"Auto-save"]}),l&&e.jsxs("select",{value:v,onChange:x,style:{padding:"6px",borderRadius:"4px",border:"1px solid #ddd"},children:[e.jsx("option",{value:30,children:"Every 30 seconds"}),e.jsx("option",{value:60,children:"Every minute"}),e.jsx("option",{value:300,children:"Every 5 minutes"}),e.jsx("option",{value:600,children:"Every 10 minutes"})]})]})]}),e.jsxs("div",{style:{marginTop:"12px"},children:[e.jsx(p.default,{variant:"subtitle2",style:{marginBottom:"8px"},children:"Save as:"}),e.jsx("div",{style:{display:"flex",gap:"8px"},children:e.jsx("button",{onClick:()=>i("markdown"),disabled:!t,style:{padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:t?"pointer":"not-allowed",opacity:t?1:.7},children:"Markdown"})})]}),g.length>0&&e.jsxs("div",{style:{marginTop:"16px"},children:[e.jsx(p.default,{variant:"subtitle2",style:{marginBottom:"8px"},children:"Recent Files:"}),e.jsx("div",{style:{display:"flex",flexWrap:"wrap",gap:"8px"},children:g.map((w,E)=>e.jsx("button",{onClick:()=>c(w),style:{padding:"6px 12px",backgroundColor:"#f5f5f5",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer",textOverflow:"ellipsis",overflow:"hidden",maxWidth:"200px",whiteSpace:"nowrap"},children:w.split("/").pop()},E))})]})]})},ae=({contexts:t,currentContext:r,onChangeContext:u,namespaces:i,currentNamespace:l,onChangeNamespace:d,isAdmin:v})=>{const b=c=>{u(c.target.value)},g=c=>{d(c.target.value)};return e.jsxs("div",{style:{borderBottom:"1px solid #e0e0e0",paddingBottom:"16px",marginBottom:"16px"},children:[e.jsx(p.default,{variant:"h6",style:{marginBottom:"12px"},children:"Kubernetes Context"}),e.jsxs("div",{style:{display:"flex",flexWrap:"wrap",gap:"20px"},children:[e.jsxs("div",{children:[e.jsx("label",{htmlFor:"context-selector",style:{display:"block",marginBottom:"6px"},children:"Context:"}),e.jsx("select",{id:"context-selector",value:r,onChange:b,style:{padding:"8px",minWidth:"200px",borderRadius:"4px",border:"1px solid #ddd"},children:t.map(c=>e.jsxs("option",{value:c,children:[c," ",c===r?"(current)":""]},c))})]}),e.jsxs("div",{children:[e.jsx("label",{htmlFor:"namespace-selector",style:{display:"block",marginBottom:"6px"},children:"Namespace:"}),e.jsx("select",{id:"namespace-selector",value:l,onChange:g,style:{padding:"8px",minWidth:"200px",borderRadius:"4px",border:"1px solid #ddd"},children:i.map(c=>e.jsxs("option",{value:c,children:[c," ",c===l?"(current)":""]},c))})]}),e.jsx("div",{style:{display:"flex",alignItems:"center",marginLeft:"auto"},children:e.jsxs("div",{style:{display:"flex",alignItems:"center",gap:"8px",padding:"8px 12px",backgroundColor:"#f5f5f5",borderRadius:"4px",border:"1px solid #e0e0e0"},children:[e.jsx("span",{style:{width:"10px",height:"10px",borderRadius:"50%",backgroundColor:v?"#4caf50":"#ff9800",display:"inline-block"}}),e.jsx(p.default,{variant:"body2",children:v?"Admin Access":"Standard Access"})]})})]})]})},de=({open:t,onClose:r})=>{J({},{enabled:!1});const u={"File Operations":{"Ctrl+S / Cmd+S":"Save document","Ctrl+N / Cmd+N":"Create new document","Ctrl+O / Cmd+O":"Open document"},"Edit Operations":{"Ctrl+Z / Cmd+Z":"Undo","Ctrl+Y / Cmd+Y":"Redo","Ctrl+Shift+Z / Cmd+Shift+Z":"Redo (alternative)","Ctrl+C / Cmd+C":"Copy (when not in input field)","Ctrl+V / Cmd+V":"Paste (when not in input field)","Ctrl+X / Cmd+X":"Cut (when not in input field)","Ctrl+F / Cmd+F":"Find"},"Editor Functions":{F1:"Toggle AI Assistant",F2:"Toggle edit mode",F5:"Run current step"},Navigation:{"Alt+↑":"Focus previous step","Alt+↓":"Focus next step"},"Step Management":{"Ctrl+Alt+N / Cmd+Alt+N":"Add new step","Ctrl+Alt+Delete / Cmd+Alt+Delete":"Delete current step","Ctrl+Alt+↑ / Cmd+Alt+↑":"Move step up","Ctrl+Alt+↓ / Cmd+Alt+↓":"Move step down"}},i=(l,d)=>e.jsxs(h.Box,{sx:{mb:3},children:[e.jsx(h.Typography,{variant:"h6",sx:{mb:2,color:"primary.main"},children:l}),e.jsx(h.Grid,{container:!0,spacing:1,children:Object.entries(d).map(([v,b])=>e.jsx(h.Grid,{item:!0,xs:12,children:e.jsxs(h.Box,{sx:{display:"flex",alignItems:"center",justifyContent:"space-between",py:.5},children:[e.jsx(h.Chip,{label:v,variant:"outlined",size:"small",sx:{fontFamily:"monospace",minWidth:"140px","& .MuiChip-label":{fontSize:"0.75rem"}}}),e.jsx(h.Typography,{variant:"body2",sx:{ml:2,flex:1},children:b})]})},v))}),l!=="Step Management"&&e.jsx(h.Divider,{sx:{mt:2}})]},l);return e.jsxs(h.Dialog,{open:t,onClose:r,maxWidth:"md",fullWidth:!0,PaperProps:{sx:{minHeight:"400px",maxHeight:"80vh"}},children:[e.jsxs(h.DialogTitle,{children:[e.jsx(h.Typography,{variant:"h5",children:"Keyboard Shortcuts"}),e.jsx(h.Typography,{variant:"body2",color:"text.secondary",sx:{mt:1},children:"Available keyboard shortcuts for the ExecDoc Editor"})]}),e.jsx(h.DialogContent,{children:e.jsxs(h.Box,{sx:{mt:1},children:[Object.entries(u).map(([l,d])=>i(l,d)),e.jsx(h.Box,{sx:{mt:3,p:2,bgcolor:"grey.50",borderRadius:1},children:e.jsxs(h.Typography,{variant:"body2",color:"text.secondary",children:[e.jsx("strong",{children:"Note:"})," Copy, Cut, and Paste shortcuts work when focus is not in input fields. Use standard browser shortcuts when editing text in input fields."]})})]})}),e.jsx(h.DialogActions,{children:e.jsx(h.Button,{onClick:r,variant:"contained",children:"Close"})})]})},se=({initialDoc:t=null})=>{const[r,u]=f.default.useState(t),[i,l]=f.default.useState(t?"steps":"overview"),[d,v]=f.default.useState(t?"refine-content":"create-overview"),b=()=>{v("implement-content"),l("steps")},g=()=>{v("refine-content"),l("steps")},c=()=>{switch(d){case"create-overview":return"Phase 1: Create & Edit Overview";case"implement-content":return"Phase 2: Implement Content";case"refine-content":return"Phase 3: Refine Content";default:return"Document Authoring"}},[s,x]=f.default.useState([]),[w,E]=f.default.useState(!1),[T,K]=f.default.useState(60),[H,W]=f.default.useState(["default","minikube","docker-desktop"]),[k,L]=f.default.useState("default"),[F,q]=f.default.useState(["default","kube-system","kube-public"]),[P,j]=f.default.useState("default"),[I,Y]=f.default.useState(!1),[N,O]=f.default.useState(!1),[o,C]=f.default.useState(0),$=a=>{if(r){const y=a.match(/^# (.+)$/m),D=y?y[1]:r.title;u({...r,title:D,overview:a,updatedAt:new Date})}else{const y=a.match(/^# (.+)$/m),D=y?y[1]:"Untitled Document";u({id:`doc-${Date.now()}`,title:D,overview:a,steps:[],createdAt:new Date,updatedAt:new Date,kubeContext:k,kubeNamespace:P})}},M=()=>{if(!r)return;const a=[{id:`step-${Date.now()}-1`,title:"Setup Environment",description:"Ensure you have the required tools and permissions to proceed.",isExpanded:!0,isCodeBlock:!1},{id:`step-${Date.now()}-2`,title:"Create Configuration",description:"Create the necessary configuration files for your deployment.",isExpanded:!0,isCodeBlock:!0,code:`apiVersion: v1
kind: ConfigMap
metadata:
  name: example-config
data:
  config.json: |
    {
      "key": "value"
    }`},{id:`step-${Date.now()}-3`,title:"Deploy Application",description:"Deploy the application to your Kubernetes cluster.",isExpanded:!0,isCodeBlock:!0,code:"kubectl apply -f deployment.yaml"},{id:`step-${Date.now()}-4`,title:"Verify Deployment",description:"Verify that the deployment was successful.",isExpanded:!0,isCodeBlock:!0,code:`kubectl get pods
kubectl get services`}];u({...r,steps:a,updatedAt:new Date}),b()},n=a=>{r&&(u({...r,steps:r.steps.map(y=>y.id===a.id?a:y),updatedAt:new Date}),d==="implement-content"&&g())},m=a=>{r&&(u({...r,steps:r.steps.map(y=>y.id===a?{...y,executed:!0,executionStatus:"running",executionOutput:"Running command..."}:y)}),setTimeout(()=>{const y=r.steps.find(G=>G.id===a);if(!y)return;const D=Math.random()>.2,Q=D?`Command executed successfully.
${y.code?`> ${y.code}
`:""}Output: Operation completed.`:`Error executing command.
${y.code?`> ${y.code}
`:""}Error: Could not complete the operation in context "${k}".`;u({...r,steps:r.steps.map(G=>G.id===a?{...G,executed:!0,executionStatus:D?"success":"failure",executionOutput:Q}:G)})},1500))},A=a=>{alert(`Doc would be saved as: ${a.title}.md`),s.includes(`/home/user/documents/${a.title}.md`)||x([`/home/user/documents/${a.title}.md`,...s.slice(0,4)])},z=()=>{alert("In a full implementation, a file picker would open here.")},X=a=>{r&&alert(`Doc would be saved as: ${r.title}.${a}`)};J({onSave:()=>{r&&A(r)},onNew:()=>{u(null),l("overview"),v("create-overview"),C(0)},onOpen:()=>{z()},onNewStep:()=>{if(!r)return;const a={id:`step-${Date.now()}`,title:"New Step",description:"",isExpanded:!0,isCodeBlock:!1};u({...r,steps:[...r.steps,a],updatedAt:new Date}),C(r.steps.length)},onDeleteStep:()=>{if(!r||r.steps.length===0)return;const a=r.steps[o];if(a&&window.confirm(`Are you sure you want to delete "${a.title}"?`)){const y=r.steps.filter((D,Q)=>Q!==o);u({...r,steps:y,updatedAt:new Date}),o>=y.length&&C(Math.max(0,y.length-1))}},onMoveStepUp:()=>{if(!r||o<=0)return;const a=[...r.steps];[a[o-1],a[o]]=[a[o],a[o-1]],u({...r,steps:a,updatedAt:new Date}),C(o-1)},onMoveStepDown:()=>{if(!r||o>=r.steps.length-1)return;const a=[...r.steps];[a[o],a[o+1]]=[a[o+1],a[o]],u({...r,steps:a,updatedAt:new Date}),C(o+1)},onFocusNextStep:()=>{!r||r.steps.length===0||C(a=>Math.min(a+1,r.steps.length-1))},onFocusPrevStep:()=>{!r||r.steps.length===0||C(a=>Math.max(a-1,0))},onRunCurrent:()=>{if(!r||r.steps.length===0)return;const a=r.steps[o];a&&m(a.id)},onToggleAssistant:()=>{O(!N)}});const ce=()=>e.jsx(ne,{initialOverview:(r==null?void 0:r.overview)||"",onSaveOverview:$,onGenerateSteps:M,authoringPhase:d}),pe=()=>r?e.jsxs("div",{children:[e.jsx(p.default,{variant:"h4",style:{marginBottom:"24px"},children:r.title}),e.jsxs("div",{style:{marginBottom:"24px"},children:[e.jsxs("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"center",paddingBottom:"8px",borderBottom:"1px solid #e0e0e0",marginBottom:"12px"},children:[e.jsx(p.default,{variant:"h6",children:"Overview"}),e.jsx("button",{onClick:()=>l("overview"),style:{padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:"Edit Overview"})]}),e.jsx("div",{style:{padding:"16px",backgroundColor:"#f9f9f9",borderRadius:"4px",marginBottom:"24px",maxHeight:"200px",overflowY:"auto"},children:r.overview.split(`
`).map((a,y)=>a.startsWith("# ")?null:a.startsWith("## ")?e.jsx(p.default,{variant:"h6",style:{marginTop:"16px",marginBottom:"8px"},children:a.substring(3)},y):a.startsWith("- ")?e.jsx(p.default,{component:"li",style:{marginLeft:"20px",marginBottom:"4px"},children:a.substring(2)},y):a===""?e.jsx("br",{},y):e.jsx(p.default,{paragraph:!0,children:a},y))})]}),e.jsx(p.default,{variant:"h6",style:{marginBottom:"16px"},children:"Steps"}),r.steps.length===0?e.jsx(p.default,{color:"textSecondary",children:"No steps defined yet."}):r.steps.map((a,y)=>e.jsx("div",{onClick:()=>C(y),onKeyDown:D=>{(D.key==="Enter"||D.key===" ")&&(D.preventDefault(),C(y))},tabIndex:0,role:"button","aria-label":`Focus step ${y+1}: ${a.title}`,style:{cursor:"pointer"},children:e.jsx(oe,{step:a,onStepChange:n,onRunStep:m,currentContext:k,currentNamespace:P,isFocused:y===o})},a.id))]}):e.jsx("div",{style:{textAlign:"center",padding:"40px"},children:e.jsx(p.default,{children:"No document loaded. Create a new one first."})});return e.jsxs("div",{style:{height:"100%",display:"flex",flexDirection:"column"},children:[e.jsxs("div",{style:{padding:"16px"},children:[e.jsxs("div",{style:{marginBottom:"16px",padding:"8px 12px",backgroundColor:"#e3f2fd",borderRadius:"4px",border:"1px solid #bbdefb"},children:[e.jsx(p.default,{variant:"subtitle1",style:{fontWeight:"bold"},children:c()}),e.jsxs("div",{style:{display:"flex",marginTop:"8px",justifyContent:"space-between",flexWrap:"wrap"},children:[e.jsxs("div",{style:{display:"flex",alignItems:"center",margin:"4px 0"},children:[e.jsx("div",{style:{width:"16px",height:"16px",borderRadius:"50%",backgroundColor:d==="create-overview"?"#1976d2":"#ddd",marginRight:"8px"}}),e.jsx(p.default,{variant:"body2",children:"Create Overview"})]}),e.jsxs("div",{style:{display:"flex",alignItems:"center",margin:"4px 0"},children:[e.jsx("div",{style:{width:"16px",height:"16px",borderRadius:"50%",backgroundColor:d==="implement-content"?"#1976d2":"#ddd",marginRight:"8px"}}),e.jsx(p.default,{variant:"body2",children:"Implement Content"})]}),e.jsxs("div",{style:{display:"flex",alignItems:"center",margin:"4px 0"},children:[e.jsx("div",{style:{width:"16px",height:"16px",borderRadius:"50%",backgroundColor:d==="refine-content"?"#1976d2":"#ddd",marginRight:"8px"}}),e.jsx(p.default,{variant:"body2",children:"Refine Content"})]})]})]}),e.jsx(ae,{contexts:H,currentContext:k,onChangeContext:L,namespaces:F,currentNamespace:P,onChangeNamespace:j,isAdmin:I}),i==="steps"&&e.jsx(ie,{execDoc:r,onSave:A,onLoad:z,onExport:X,autoSaveEnabled:w,onToggleAutoSave:()=>E(a=>!a),autoSaveInterval:T,onChangeAutoSaveInterval:K,recentFiles:s,onOpenRecentFile:a=>alert(`Would open: ${a}`)}),r&&e.jsx("div",{style:{marginBottom:"16px"},children:e.jsxs("div",{style:{display:"flex"},children:[e.jsx("button",{onClick:()=>l("overview"),style:{flex:1,padding:"8px",backgroundColor:i==="overview"?"#1976d2":"#f1f1f1",color:i==="overview"?"white":"black",border:"none",borderRadius:"4px 0 0 4px",cursor:"pointer",fontWeight:i==="overview"?"bold":"normal"},children:"Document Overview"}),e.jsx("button",{onClick:()=>l("steps"),style:{flex:1,padding:"8px",backgroundColor:i==="steps"?"#1976d2":"#f1f1f1",color:i==="steps"?"white":"black",border:"none",borderRadius:"0 4px 4px 0",cursor:"pointer",fontWeight:i==="steps"?"bold":"normal"},children:"Document Steps"})]})})]}),e.jsx("div",{style:{flex:1,padding:"0 16px 16px",overflowY:"auto"},children:i==="overview"?ce():pe()}),e.jsx(h.Box,{sx:{position:"fixed",bottom:16,right:16},children:e.jsx(h.Tooltip,{title:"Keyboard Shortcuts (F1)",children:e.jsx(h.IconButton,{onClick:()=>O(!0),sx:{backgroundColor:"primary.main",color:"white","&:hover":{backgroundColor:"primary.dark"}},children:e.jsx(re,{})})})}),e.jsx(de,{open:N,onClose:()=>O(!1)})]})};S.registerRoute({path:"/exec-doc-editor",sidebar:{item:"exec-doc-editor",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"exec-doc-editor",exact:!0,component:()=>e.jsx(U.SectionBox,{title:"Executable Document Editor",textAlign:"left",paddingTop:2,children:e.jsx(se,{})})}),S.registerSidebarEntry({name:"exec-doc-editor",label:"Exec Doc Editor",url:"/exec-doc-editor",icon:"mdi:file-document-edit",sidebar:"Innovation-engine"}),S.registerSidebarEntry({name:"architect",label:"Architect",url:"/exec-doc-editor",icon:"mdi:code-braces-box",sidebar:"Innovation-engine"});function le(){const[t,r]=B.useState(""),[u,i]=B.useState(""),[l,d]=B.useState(!1),[v,b]=B.useState(null),[g,c]=B.useState(!1),s=async x=>{if(x.preventDefault(),!t.trim()){b("Please enter a topic to generate an overview"),c(!0);return}d(!0),b(null);try{const w=await fetch(`${R.serverBaseUrl}/api/overview`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({topic:t})});if(!w.ok){const T=await w.json();throw new Error(T.error||"Failed to generate overview")}const E=await w.json();i(E.overview||"No overview generated")}catch(w){b(w.message||"Failed to generate overview"),c(!0)}finally{d(!1)}};return e.jsxs(h.Box,{p:2,children:[e.jsx(h.Typography,{variant:"h4",gutterBottom:!0,children:"Azure Architecture Overview Generator"}),e.jsx(h.Typography,{variant:"body1",paragraph:!0,children:"Enter an Azure workload or solution to generate a comprehensive architectural overview."}),e.jsx(h.Card,{children:e.jsx(h.CardContent,{children:e.jsx("form",{onSubmit:s,children:e.jsxs(h.Grid,{container:!0,spacing:2,children:[e.jsx(h.Grid,{item:!0,xs:12,children:e.jsx(h.TextField,{fullWidth:!0,label:"Workload or Solution",value:t,onChange:x=>r(x.target.value),placeholder:"E.g., Web Application with SQL Database, Microservices Architecture, etc.",disabled:l})}),e.jsx(h.Grid,{item:!0,xs:12,children:e.jsx(h.Button,{type:"submit",variant:"contained",color:"primary",disabled:l,children:l?e.jsx(h.CircularProgress,{size:24}):"Generate Overview"})})]})})})}),u&&e.jsx(h.Card,{style:{marginTop:16},children:e.jsxs(h.CardContent,{children:["              ",e.jsxs(h.Typography,{variant:"h5",gutterBottom:!0,children:["Azure Architecture Overview: ",t]}),e.jsx(h.Box,{style:{whiteSpace:"pre-wrap",backgroundColor:"#f5f5f5",padding:16,borderRadius:4},children:e.jsx(h.Typography,{variant:"body1",children:u})})]})}),e.jsx(h.Snackbar,{open:g,autoHideDuration:6e3,onClose:()=>c(!1),children:e.jsx(h.Alert,{onClose:()=>c(!1),severity:"error",children:v})})]})}S.registerSidebarEntry({name:"mypluginsidebar",label:"Getting Started",url:"/getting-started",icon:"mdi:comment-quote",sidebar:"HOME"}),S.registerRoute({path:"/getting-started",sidebar:{item:"getting-started",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"getting-started",exact:!0,component:()=>{const t=()=>{window.location.hash="#/shell-exec",setTimeout(()=>{window.dispatchEvent(new CustomEvent("prefill-innovation-engine-command",{detail:"ie execute ../../../scenarios/testing/variableHierarchy.md"}))},100)};return e.jsxs(U.SectionBox,{title:"Getting Started",textAlign:"center",paddingTop:2,children:[e.jsx(p.default,{children:"This is where Innovation Engine lives"}),e.jsx("br",{}),e.jsx("a",{href:"#",onClick:r=>{r.preventDefault(),t()},style:{fontWeight:"bold",color:"#1976d2",textDecoration:"underline",cursor:"pointer"},children:"Test Innovation Engine"})]})}}),S.registerSidebarEntry({name:"backtohome",label:"Back to Home",url:"/",icon:"mdi:hexagon",sidebar:"Innovation-engine"}),S.registerSidebarEntry({name:"getting-started",label:"Getting Started",url:"/getting-started",icon:"mdi:comment-quote",sidebar:"Innovation-engine"}),S.registerRoute({path:"/shell-exec",sidebar:{item:"shell-exec",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"shell-exec",exact:!0,component:()=>{const[t,r]=f.default.useState("ie execute "),[u,i]=f.default.useState(""),[l,d]=f.default.useState(""),[v,b]=f.default.useState(!1);f.default.useEffect(()=>{const c=s=>{s.detail&&r(s.detail)};return window.addEventListener("prefill-innovation-engine-command",c),()=>window.removeEventListener("prefill-innovation-engine-command",c)},[]);const g=async()=>{b(!0),i(""),d("");try{const c=await fetch("http://localhost:4000/api/exec",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({command:t})}),s=await c.json();c.ok?i(`stdout:
${s.stdout}
stderr:
${s.stderr}
exitCode: ${s.exitCode}`):d(s.error||"Unknown error")}catch(c){d(c.message)}finally{b(!1)}};return e.jsxs(U.SectionBox,{title:"Innovation Engine",textAlign:"center",paddingTop:2,children:[e.jsx(p.default,{children:"Enter an allowlisted shell command (e.g., ie):"}),e.jsx("input",{type:"text",value:t,onChange:c=>r(c.target.value),onKeyDown:c=>{c.key==="Enter"&&!v&&g()},style:{width:"60%",margin:"1em 0",padding:"0.5em"}}),e.jsx("br",{}),e.jsx("button",{onClick:g,disabled:v,style:{padding:"0.5em 1em"},children:v?"Running...":"Execute"}),e.jsx("pre",{style:{textAlign:"left",marginTop:"1em",background:"#f5f5f5",padding:"1em"},children:u}),l&&e.jsxs(p.default,{color:"error",children:["Error: ",l]})]})}}),S.registerSidebarEntry({name:"shell-exec",label:"Innovation Engine",url:"/shell-exec",icon:"mdi:console",sidebar:"Innovation-engine"}),S.registerSidebarEntry({name:"assistant",label:"Assistant",url:"/assistant",icon:"mdi:robot",sidebar:"Innovation-engine"}),S.registerRoute({path:"/assistant",sidebar:{item:"assistant",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"assistant",exact:!0,component:()=>{const[t,r]=f.default.useState(""),[u,i]=f.default.useState([{role:"assistant",content:"Hello! I'm the Innovation Engine Assistant. How can I help you with your Kubernetes or Executable Document needs?"}]),[l,d]=f.default.useState(!1),[v,b]=f.default.useState(""),g=f.default.useRef(null);f.default.useEffect(()=>{g.current&&(g.current.scrollTop=g.current.scrollHeight)},[u]);const c=async()=>{if(!t.trim())return;const s=t;i(x=>[...x,{role:"user",content:s}]),d(!0),r("");try{const x=await fetch("http://localhost:4000/api/assistant",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({messages:u.concat({role:"user",content:s})})});if(!x.ok)throw new Error(`Error: ${x.status} ${x.statusText}`);const w=await x.json();i(E=>[...E,{role:"assistant",content:w.response}])}catch(x){console.error("Error communicating with Azure AI:",x),b(x.message||"Failed to communicate with the assistant service"),i(w=>[...w,{role:"assistant",content:"I'm sorry, I encountered an error while processing your request. Please try again later."}])}finally{d(!1)}};return e.jsxs(U.SectionBox,{title:"Innovation Engine Assistant",textAlign:"left",paddingTop:2,children:[e.jsxs("div",{ref:g,style:{height:"400px",overflowY:"auto",marginBottom:"20px",padding:"10px",border:"1px solid #e0e0e0",borderRadius:"4px",backgroundColor:"#f9f9f9"},children:[u.map((s,x)=>e.jsx("div",{style:{marginBottom:"10px",textAlign:s.role==="user"?"right":"left"},children:e.jsx("div",{style:{display:"inline-block",maxWidth:"80%",padding:"10px",borderRadius:"8px",backgroundColor:s.role==="user"?"#1976d2":"#ffffff",color:s.role==="user"?"white":"black",boxShadow:"0 1px 2px rgba(0,0,0,0.1)",border:s.role==="assistant"?"1px solid #e0e0e0":"none"},children:e.jsx(p.default,{children:s.content})})},x)),l&&e.jsx("div",{style:{textAlign:"center",padding:"10px"},children:e.jsx(p.default,{color:"textSecondary",children:"Processing your request..."})})]}),e.jsxs("div",{style:{display:"flex",alignItems:"flex-start",gap:"10px"},children:[e.jsx("textarea",{value:t,onChange:s=>r(s.target.value),onKeyDown:s=>{s.key==="Enter"&&!s.shiftKey&&(s.preventDefault(),c())},placeholder:"Enter your question or request here (e.g., 'Create a deployment for my app')",style:{flexGrow:1,padding:"10px",borderRadius:"4px",border:"1px solid #ccc",minHeight:"100px",resize:"vertical",fontFamily:"inherit",fontSize:"14px"}}),e.jsx("button",{onClick:c,disabled:l||!t.trim(),style:{padding:"10px 20px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:l||!t.trim()?"not-allowed":"pointer",opacity:l||!t.trim()?.7:1},children:"Send"})]}),e.jsxs("div",{style:{marginTop:"20px",borderTop:"1px solid #e0e0e0",paddingTop:"20px"},children:[e.jsx(p.default,{variant:"h6",children:"Quick Start:"}),e.jsx("div",{style:{display:"flex",flexWrap:"wrap",gap:"10px",marginTop:"10px"},children:["Create a simple deployment","Expose a service","Author an Executable Document","Learn about Kubernetes basics"].map((s,x)=>e.jsx("button",{onClick:()=>r(s),style:{padding:"8px 12px",backgroundColor:"#f1f1f1",border:"1px solid #ddd",borderRadius:"16px",cursor:"pointer"},children:s},x))}),e.jsxs("div",{style:{marginTop:"20px",textAlign:"center",padding:"15px",backgroundColor:"#e8f5e9",borderRadius:"8px"},children:[e.jsx(p.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Try our new Exec Doc Editor!"}),e.jsx(p.default,{variant:"body2",style:{marginBottom:"12px"},children:"The new Executable Document Editor provides a more powerful interface for authoring and editing Exec Docs."}),e.jsx("a",{href:"#/exec-doc-editor",style:{display:"inline-block",padding:"8px 16px",backgroundColor:"#4caf50",color:"white",textDecoration:"none",borderRadius:"4px",fontWeight:"bold"},children:"Open Exec Doc Editor"})]})]})]})}}),S.registerSidebarEntry({name:"overview-generator",label:"Azure Architecture",url:"/overview-generator",icon:"mdi:cloud-outline",sidebar:"Innovation-engine"}),S.registerRoute({path:"/overview-generator",sidebar:{item:"overview-generator",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"overview-generator",exact:!0,component:le})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
