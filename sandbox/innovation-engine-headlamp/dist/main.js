(function(e,S){typeof exports=="object"&&typeof module<"u"?S(require("react/jsx-runtime"),require("@kinvolk/headlamp-plugin/lib"),require("@kinvolk/headlamp-plugin/lib/CommonComponents"),require("@mui/material/Typography"),require("react"),require("@mui/material"),require("@mui/material/utils")):typeof define=="function"&&define.amd?define(["react/jsx-runtime","@kinvolk/headlamp-plugin/lib","@kinvolk/headlamp-plugin/lib/CommonComponents","@mui/material/Typography","react","@mui/material","@mui/material/utils"],S):(e=typeof globalThis<"u"?globalThis:e||self,S(e.pluginLib.ReactJSX,e.pluginLib,e.pluginLib.CommonComponents,e.pluginLib.MuiMaterial.Typography,e.pluginLib.React,e.pluginLib.MuiMaterial,e.pluginLib.MuiMaterial.utils))})(this,function(e,S,q,ie,T,g,ae){"use strict";const Q=t=>t&&typeof t=="object"&&"default"in t?t:{default:t},u=Q(ie),h=Q(T),se=ae.createSvgIcon(e.jsx("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m1 17h-2v-2h2zm2.07-7.75-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25"}),"Help"),Z=(t,r={})=>{const{enabled:a=!0,preventDefault:n=!0}=r,c=T.useCallback(s=>{if(!a)return;const{ctrlKey:y,metaKey:w,shiftKey:x,altKey:p,key:l}=s,v=y||w;if(v&&!x&&!p)switch(l.toLowerCase()){case"s":if(t.onSave){n&&s.preventDefault(),t.onSave();return}break;case"n":if(t.onNew){n&&s.preventDefault(),t.onNew();return}break;case"o":if(t.onOpen){n&&s.preventDefault(),t.onOpen();return}break;case"z":if(t.onUndo){n&&s.preventDefault(),t.onUndo();return}break;case"y":if(t.onRedo){n&&s.preventDefault(),t.onRedo();return}break;case"c":if(t.onCopy){const C=s.target;if(!["INPUT","TEXTAREA"].includes(C.tagName)){n&&s.preventDefault(),t.onCopy();return}}break;case"v":if(t.onPaste){const C=s.target;if(!["INPUT","TEXTAREA"].includes(C.tagName)){n&&s.preventDefault(),t.onPaste();return}}break;case"x":if(t.onCut){const C=s.target;if(!["INPUT","TEXTAREA"].includes(C.tagName)){n&&s.preventDefault(),t.onCut();return}}break;case"f":if(t.onFind){n&&s.preventDefault(),t.onFind();return}break}if(v&&x&&!p&&l.toLowerCase()==="z"&&t.onRedo){n&&s.preventDefault(),t.onRedo();return}if(!v&&!x&&!p)switch(l){case"F2":if(t.onToggleEdit){n&&s.preventDefault(),t.onToggleEdit();return}break;case"F5":if(t.onRunCurrent){n&&s.preventDefault(),t.onRunCurrent();return}break;case"F1":if(t.onToggleAssistant){n&&s.preventDefault(),t.onToggleAssistant();return}break}if(p&&!v&&!x)switch(l){case"ArrowUp":if(t.onFocusPrevStep){n&&s.preventDefault(),t.onFocusPrevStep();return}break;case"ArrowDown":if(t.onFocusNextStep){n&&s.preventDefault(),t.onFocusNextStep();return}break}if(v&&p&&!x)switch(l.toLowerCase()){case"n":if(t.onNewStep){n&&s.preventDefault(),t.onNewStep();return}break;case"delete":case"backspace":if(t.onDeleteStep){n&&s.preventDefault(),t.onDeleteStep();return}break;case"arrowup":if(t.onMoveStepUp){n&&s.preventDefault(),t.onMoveStepUp();return}break;case"arrowdown":if(t.onMoveStepDown){n&&s.preventDefault(),t.onMoveStepDown();return}break}},[t,a,n]);return T.useEffect(()=>{if(a)return document.addEventListener("keydown",c),()=>{document.removeEventListener("keydown",c)}},[c,a]),{shortcuts:{"Ctrl+S / Cmd+S":"Save document","Ctrl+N / Cmd+N":"Create new document","Ctrl+O / Cmd+O":"Open document","Ctrl+Z / Cmd+Z":"Undo","Ctrl+Y / Cmd+Y":"Redo","Ctrl+Shift+Z / Cmd+Shift+Z":"Redo (alternative)","Ctrl+C / Cmd+C":"Copy (when not in input field)","Ctrl+V / Cmd+V":"Paste (when not in input field)","Ctrl+X / Cmd+X":"Cut (when not in input field)","Ctrl+F / Cmd+F":"Find",F1:"Toggle AI Assistant",F2:"Toggle edit mode",F5:"Run current step","Alt+↑":"Focus previous step","Alt+↓":"Focus next step","Ctrl+Alt+N / Cmd+Alt+N":"Add new step","Ctrl+Alt+Delete / Cmd+Alt+Delete":"Delete current step","Ctrl+Alt+↑ / Cmd+Alt+↑":"Move step up","Ctrl+Alt+↓ / Cmd+Alt+↓":"Move step down"}}},de=({step:t,onStepChange:r,onRunStep:a,currentContext:n,currentNamespace:c,isFocused:s=!1})=>{const[y,w]=h.default.useState(!1),[x,p]=h.default.useState(""),[l,v]=h.default.useState(!1),[C,A]=h.default.useState([]),O=()=>{a(t.id)},W=o=>{r({...t,title:o.target.value})},z=o=>{r({...t,description:o.target.value})},j=o=>{r({...t,code:o.target.value})},E=o=>{const m=o.target.checked;r({...t,isCodeBlock:m,code:m&&!t.code?"":t.code})},K=o=>{r({...t,isExpanded:o.target.checked})},N=()=>{r({...t,executed:!1,executionStatus:null,executionOutput:void 0})};Z({onToggleEdit:()=>{w(!y)},onToggleAssistant:()=>{v(!l)},onRunCurrent:()=>{O()}},{enabled:s});const $=()=>{x.trim()&&(A(o=>[...o,{role:"user",content:x}]),setTimeout(()=>{A(o=>[...o,{role:"assistant",content:`Here's my suggestion for your request: "${x}". This is a placeholder response that would be generated by GitHub Copilot in the actual implementation.`}]),p("")},1e3))},X=o=>{const m=()=>{r({...t,description:t.description+`

`+o.content}),v(!1)},I=()=>{r({...t,code:(t.code||"")+`

`+o.content,isCodeBlock:!0}),v(!1)},k=o.content.includes("```")||/\b(function|const|let|var|import|export|class|if|for|while)\b/.test(o.content);t.isCodeBlock&&k?I():(t.isCodeBlock,m())},H=()=>{if(!t.executed)return null;let o="",m="";switch(t.executionStatus){case"success":o="#4caf50",m="Success";break;case"failure":o="#f44336",m="Failed";break;case"running":o="#2196f3",m="Running...";break;default:return null}return e.jsx("span",{style:{backgroundColor:o,color:"white",padding:"3px 8px",borderRadius:"12px",fontSize:"12px",marginLeft:"10px"},children:m})},F=()=>{const o="default",m=c;return n!==o?e.jsx("div",{style:{marginTop:"10px",padding:"8px",backgroundColor:"#fff3cd",borderRadius:"4px"},children:e.jsxs(u.default,{variant:"body2",style:{color:"#856404"},children:['⚠️ This step may require the "',o,'" context and "',m,`" namespace, but you're currently in context "`,n,'".']})}):null};return e.jsxs("div",{style:{border:s?"2px solid #1976d2":"1px solid #e0e0e0",borderRadius:"8px",marginBottom:"20px",backgroundColor:s?"#f3f8ff":"white",boxShadow:s?"0 2px 8px rgba(25, 118, 210, 0.15)":"none",transition:"all 0.2s ease-in-out",overflow:"hidden"},children:[e.jsxs("div",{style:{padding:"12px 16px",backgroundColor:"#f5f5f5",display:"flex",justifyContent:"space-between",alignItems:"center",borderBottom:"1px solid #ddd"},children:[y?e.jsx("input",{type:"text",value:t.title,onChange:W,style:{fontSize:"18px",fontWeight:"bold",padding:"8px",width:"60%",borderRadius:"4px",border:"1px solid #ddd"},placeholder:"Step title"}):e.jsxs("div",{style:{display:"flex",alignItems:"center"},children:[e.jsx(u.default,{variant:"h6",style:{margin:0},children:t.title}),H(),t.isCodeBlock&&e.jsxs("span",{style:{backgroundColor:"#e0f7fa",color:"#00838f",padding:"2px 8px",borderRadius:"12px",fontSize:"12px",marginLeft:"10px",display:"flex",alignItems:"center"},children:[e.jsx("span",{style:{marginRight:"4px"},children:"⚙️"}),"Executable"]})]}),e.jsxs("div",{children:[e.jsx("button",{onClick:()=>w(!y),style:{marginRight:"8px",padding:"6px 12px",backgroundColor:y?"#1976d2":"#f0f0f0",color:y?"white":"black",border:"1px solid "+(y?"#1976d2":"#ddd"),borderRadius:"4px",cursor:"pointer",fontWeight:y?"bold":"normal"},children:y?"Save Changes":"Edit Step"}),e.jsx("button",{onClick:()=>v(!l),style:{marginRight:"8px",padding:"6px 12px",backgroundColor:l?"#9c27b0":"#f0f0f0",color:l?"white":"black",border:"1px solid "+(l?"#9c27b0":"#ddd"),borderRadius:"4px",cursor:"pointer"},children:l?"Hide Help":"Get Help"}),t.isCodeBlock&&e.jsxs("button",{onClick:O,disabled:t.executionStatus==="running","aria-label":`Run step ${t.title}`,style:{padding:"6px 12px",backgroundColor:"#4caf50",color:"white",border:"none",borderRadius:"4px",cursor:t.executionStatus==="running"?"not-allowed":"pointer",opacity:t.executionStatus==="running"?.7:1,display:"inline-flex",alignItems:"center"},children:[e.jsx("span",{style:{marginRight:"4px"},children:"▶️"}),t.executionStatus==="running"?"Running...":"Run"]})]})]}),e.jsxs("div",{style:{padding:"16px"},children:[F(),y?e.jsxs("div",{children:[e.jsxs("div",{style:{display:"flex",flexWrap:"wrap",gap:"16px",marginBottom:"16px",padding:"12px",backgroundColor:"#f5f5f5",borderRadius:"4px"},children:[e.jsxs("label",{style:{display:"flex",alignItems:"center",cursor:"pointer"},children:[e.jsx("input",{type:"checkbox",checked:t.isCodeBlock,onChange:o=>E(o),style:{marginRight:"8px"}}),e.jsx("span",{children:"Contains executable code"})]}),e.jsxs("label",{style:{display:"flex",alignItems:"center",cursor:"pointer"},children:[e.jsx("input",{type:"checkbox",checked:t.isExpanded,onChange:o=>K(o),style:{marginRight:"8px"}}),e.jsx("span",{children:"Expanded by default"})]}),t.executed&&e.jsx("button",{onClick:N,style:{padding:"4px 8px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:"Reset Execution Status"})]}),e.jsx(u.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Description:"}),e.jsx("textarea",{value:t.description,onChange:z,onKeyDown:o=>{o.key==="Enter"&&(o.ctrlKey||o.metaKey)&&(o.preventDefault(),w(!1))},placeholder:"Enter description for this step. Press CTRL+ENTER to save changes.",style:{width:"100%",minHeight:"200px",padding:"8px",marginBottom:"16px",borderRadius:"4px",border:"1px solid #ddd",fontSize:"14px",lineHeight:"1.5"}}),t.isCodeBlock&&e.jsxs("div",{children:[e.jsx(u.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Code:"}),e.jsx("textarea",{value:t.code||"",onChange:j,onKeyDown:o=>{o.key==="Enter"&&(o.ctrlKey||o.metaKey)&&(o.preventDefault(),w(!1))},style:{width:"100%",minHeight:"250px",padding:"8px",fontFamily:"monospace",backgroundColor:"#f8f8f8",borderRadius:"4px",border:"1px solid #ddd",fontSize:"14px",lineHeight:"1.5"},placeholder:"Enter executable code here. Press CTRL+ENTER to save changes."}),e.jsx(u.default,{variant:"caption",color:"textSecondary",style:{display:"block",marginTop:"4px"},children:"This code will be executed when the user runs this step."})]})]}):e.jsxs("div",{children:[e.jsx(u.default,{variant:"body1",style:{whiteSpace:"pre-wrap",marginBottom:"16px"},children:t.description}),t.isCodeBlock&&t.code&&e.jsx("div",{style:{backgroundColor:"#f8f8f8",padding:"12px",borderRadius:"4px",marginBottom:"16px",overflowX:"auto"},children:e.jsx("pre",{style:{margin:0,fontFamily:"monospace"},children:t.code})})]}),t.executed&&t.executionOutput&&e.jsxs("div",{style:{backgroundColor:"#f8f8f8",padding:"12px",borderRadius:"4px",marginTop:"16px",border:"1px solid #ddd"},children:[e.jsx(u.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Output:"}),e.jsx("pre",{style:{margin:0,fontFamily:"monospace",whiteSpace:"pre-wrap"},children:t.executionOutput})]})]}),l&&e.jsxs("div",{style:{padding:"16px",borderTop:"1px solid #e0e0e0"},children:[e.jsx(u.default,{variant:"h6",style:{marginBottom:"12px"},children:"Copilot Assistance"}),e.jsx("div",{style:{maxHeight:"200px",overflowY:"auto",marginBottom:"16px",padding:"8px",border:"1px solid #e0e0e0",borderRadius:"4px",backgroundColor:"#f9f9f9"},children:C.map((o,m)=>e.jsx("div",{style:{marginBottom:"10px",textAlign:o.role==="user"?"right":"left"},children:e.jsxs("div",{style:{display:"inline-block",maxWidth:"80%",padding:"10px",borderRadius:"8px",backgroundColor:o.role==="user"?"#1976d2":"#ffffff",color:o.role==="user"?"white":"black",boxShadow:"0 1px 2px rgba(0,0,0,0.1)",border:o.role==="assistant"?"1px solid #e0e0e0":"none"},children:[e.jsx(u.default,{children:o.content}),o.role==="assistant"&&e.jsxs("div",{style:{marginTop:"8px",display:"flex",flexWrap:"wrap",gap:"8px"},children:[e.jsx("button",{onClick:()=>X(o),style:{padding:"4px 8px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:"pointer",fontSize:"12px"},children:"Apply Suggestion"}),t.isCodeBlock&&e.jsxs("div",{style:{display:"flex",gap:"4px"},children:[e.jsx("button",{onClick:()=>{r({...t,description:t.description+`

`+o.content}),v(!1)},style:{padding:"4px 8px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px 0 0 4px",cursor:"pointer",fontSize:"12px"},children:"Apply to Description"}),e.jsx("button",{onClick:()=>{r({...t,code:(t.code||"")+`

`+o.content}),v(!1)},style:{padding:"4px 8px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"0 4px 4px 0",cursor:"pointer",fontSize:"12px"},children:"Apply to Code"})]})]})]})},m))}),e.jsxs("div",{style:{display:"flex",gap:"8px"},children:[e.jsx("textarea",{value:x,onChange:o=>p(o.target.value),onKeyDown:o=>{o.key==="Enter"&&(o.ctrlKey||o.metaKey)&&x.trim()&&(o.preventDefault(),$())},placeholder:"Ask for help with this step (e.g., 'Help me improve the code for this step'). Press CTRL+ENTER to submit.",style:{flexGrow:1,padding:"8px",borderRadius:"4px",border:"1px solid #ddd",minHeight:"150px",fontSize:"14px",lineHeight:"1.5"}}),e.jsx("button",{onClick:$,disabled:!x.trim(),style:{alignSelf:"flex-end",padding:"8px 16px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:x.trim()?"pointer":"not-allowed",opacity:x.trim()?1:.7},children:"Ask Copilot"})]})]})]})},_={serverBaseUrl:"http://localhost:4001",async generateOverview(t){console.log(`Generating overview for topic: "${t}" using server at ${this.serverBaseUrl}`);try{const r=await fetch(`${this.serverBaseUrl}/api/overview`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({topic:t})});if(!r.ok)try{const a=r.headers.get("content-type");if(a&&a.includes("application/json")){const n=await r.json();throw new Error(n.error||"Failed to generate overview")}else{const n=await r.text();throw new Error(`Server error: ${r.status} - ${n.substring(0,100)}...`)}}catch(a){throw new Error(`Failed to generate overview: ${a.message}`)}try{return(await r.json()).overview||"No overview generated"}catch{const n=await r.clone().text();throw new Error(`Invalid JSON response: ${n.substring(0,100)}...`)}}catch(r){throw console.error("Error in generateOverview:",r),r}},async sendAssistantQuery(t){const r=await fetch(`${this.serverBaseUrl}/api/assistant`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({messages:t})});if(!r.ok)try{const n=r.headers.get("content-type");if(n&&n.includes("application/json")){const c=await r.json();throw new Error(c.error||"Failed to get response from assistant")}else{const c=await r.text();throw new Error(`Server error: ${r.status} - ${c.substring(0,100)}...`)}}catch(n){throw new Error(`Failed to get response from assistant: ${n.message}`)}return(await r.json()).response||"No response generated"},async executeCommand(t){const r=await fetch(`${this.serverBaseUrl}/api/exec`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({command:t})});if(!r.ok){const a=await r.json();throw new Error(a.error||"Failed to execute command")}return await r.json()}},le=({initialOverview:t="",onSaveOverview:r,onGenerateSteps:a,authoringPhase:n="create-overview"})=>{const[c,s]=h.default.useState(t),[y,w]=h.default.useState(!1),[x,p]=h.default.useState(""),[l,v]=h.default.useState(!1),[C,A]=h.default.useState(null),[O,W]=h.default.useState(!1),[z,j]=h.default.useState([]),[E,K]=h.default.useState(""),[N,Y]=h.default.useState(70),[P,G]=h.default.useState(!1),$=h.default.useRef(null);h.default.useEffect(()=>{const i=()=>{$.current&&($.current.style.display="grid")};return window.addEventListener("resize",i),i(),()=>{window.removeEventListener("resize",i)}},[]);const X=()=>{r(c),a()},H=()=>{E.trim()&&(j(i=>[...i,{role:"user",content:E}]),setTimeout(()=>{j(i=>[...i,{role:"assistant",content:`Here are my thoughts about your overview based on your request: "${E}". This is a placeholder response that would be generated by GitHub Copilot in the actual implementation.`}]),K("")},1e3))},F=async()=>{if(x.trim()){v(!0),A(null);try{const i=`Kubernetes executable document for: ${x}`,b=await _.generateOverview(i);s(b),p(""),w(!0)}catch(i){A(i.message||"An error occurred while generating the overview")}finally{v(!1)}}},o=i=>{if(i.role==="assistant"){let b=i.content;b=b.replace(/Here are my thoughts about your overview based on your request: "[^"]*"\. /,""),b=b.replace("This is a placeholder response that would be generated by GitHub Copilot in the actual implementation.",""),s(B=>{const L=B.trim()?`

`:"";return B.trim()+L+b.trim()}),y||w(!0)}},m=i=>{i.preventDefault(),G(!0);const b=L=>{const V=document.getElementById("overview-authoring-container");if(V){const J=V.getBoundingClientRect(),U=(L.clientX-J.left)/J.width*100;U>30&&U<70&&Y(U)}},B=()=>{G(!1),document.removeEventListener("mousemove",b),document.removeEventListener("mouseup",B)};document.addEventListener("mousemove",b),document.addEventListener("mouseup",B)},I=()=>{W(i=>!i)},k=()=>{switch(n){case"create-overview":return"Generate Steps";default:return"Generate Steps"}};return e.jsxs("div",{style:{display:"flex",flexDirection:"column",height:"100%"},children:[e.jsx(u.default,{variant:"h5",style:{marginBottom:"16px"},children:"Create & Edit Document Overview"}),e.jsx("div",{style:{padding:"8px 12px",backgroundColor:"#f0f9ff",borderLeft:"4px solid #1976d2",marginBottom:"16px"},children:e.jsx(u.default,{variant:"body2",children:n==="create-overview"?"Step 1: Create an overview that describes what this document will accomplish.":"Step 2: Refine your overview to ensure it accurately describes the intended workflow."})}),e.jsxs("div",{style:{padding:"12px",backgroundColor:"#e3f2fd",borderRadius:"4px",marginBottom:"16px",border:"1px solid #bbdefb"},children:[e.jsx(u.default,{variant:"subtitle1",style:{fontWeight:"bold",marginBottom:"8px"},children:"Generate with Azure AI"}),e.jsx(u.default,{variant:"body2",style:{marginBottom:"12px"},children:"Use Azure OpenAI to generate an architectural overview for your document."}),e.jsxs("div",{style:{display:"flex",gap:"8px",marginBottom:"12px"},children:[e.jsx("div",{style:{flex:1},children:e.jsx("input",{type:"text",value:x,onChange:i=>p(i.target.value),onKeyDown:i=>{i.key==="Enter"&&x.trim()&&!l&&(i.preventDefault(),F())},placeholder:"E.g., Kubernetes Deployment with Service Mesh (Press ENTER to generate)",style:{width:"100%",padding:"8px 12px",border:"1px solid #ccc",borderRadius:"4px",fontSize:"14px"},disabled:l})}),e.jsx("button",{onClick:F,disabled:l||!x.trim(),style:{padding:"8px 16px",backgroundColor:"#0078d4",color:"white",border:"none",borderRadius:"4px",cursor:l||!x.trim()?"not-allowed":"pointer",opacity:l||!x.trim()?.7:1},children:l?"Generating...":"Generate Overview"})]}),e.jsxs("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"center",marginTop:"8px"},children:[e.jsx("div",{children:C&&e.jsx("div",{style:{padding:"8px",backgroundColor:"#ffebee",border:"1px solid #ffcdd2",borderRadius:"4px",color:"#c62828"},children:e.jsx(u.default,{variant:"body2",children:C})})}),c.trim()&&e.jsx("button",{onClick:X,disabled:!c.trim(),style:{padding:"8px 16px",backgroundColor:"#4caf50",color:"white",border:"none",borderRadius:"4px",cursor:c.trim()?"pointer":"not-allowed",opacity:c.trim()?1:.7,fontWeight:"bold"},children:k()})]})]}),e.jsxs("div",{id:"overview-authoring-container",ref:$,style:{flex:1,display:"grid",gridTemplateColumns:`${N}% 6px calc(${100-N-.6}%)`,gridTemplateRows:"1fr",overflow:"hidden",position:"relative",minHeight:"600px"},children:[e.jsx("div",{style:{height:"100%",display:"flex",flexDirection:"column",overflow:"hidden"},children:e.jsxs("div",{style:{display:"flex",flexDirection:"column",height:"100%"},children:[e.jsxs("div",{style:{marginBottom:"16px",display:"flex",justifyContent:"space-between"},children:[e.jsx(u.default,{variant:"subtitle1",children:y?"Edit Overview":"Preview Overview"}),e.jsx("div",{children:e.jsx("button",{onClick:()=>w(!y),style:{padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:y?"Preview":"Edit"})})]}),e.jsx("div",{style:{flex:1,display:"flex",flexDirection:"column",border:"1px solid #e0e0e0",borderRadius:"4px",padding:"12px",backgroundColor:"#ffffff",overflowY:"auto"},children:y?e.jsx("textarea",{value:c,onChange:i=>s(i.target.value),onKeyDown:i=>{i.key==="Enter"&&(i.ctrlKey||i.metaKey)&&c.trim()&&(i.preventDefault(),w(!1))},placeholder:"Enter your document overview content. Press CTRL+ENTER to save changes.",style:{width:"100%",height:"100%",padding:"8px",borderRadius:"4px",border:"1px solid #ddd",fontFamily:"monospace",fontSize:"14px",lineHeight:"1.5",resize:"none"}}):e.jsx("div",{style:{padding:"16px",flex:1,maxWidth:"800px",margin:"0 auto",fontFamily:"system-ui, -apple-system, sans-serif",lineHeight:1.6,overflow:"auto"},children:c.split(`
`).map((i,b)=>i.startsWith("# ")?e.jsx(u.default,{variant:"h4",style:{marginBottom:"16px"},children:i.substring(2)},b):i.startsWith("## ")?e.jsx(u.default,{variant:"h5",style:{marginTop:"24px",marginBottom:"12px"},children:i.substring(3)},b):i.startsWith("- ")?e.jsx(u.default,{component:"li",style:{marginLeft:"20px",marginBottom:"8px"},children:i.substring(2)},b):i===""?e.jsx("br",{},b):e.jsx(u.default,{paragraph:!0,children:i},b))})})]})}),e.jsx("div",{role:"separator","aria-orientation":"vertical","aria-label":"Resize panels",style:{width:"6px",height:"100%",background:"#e0e0e0",cursor:"col-resize",userSelect:"none",transition:P?"none":"background 0.2s",position:"relative"},onMouseDown:m,onKeyDown:i=>{if(i.key==="ArrowLeft"||i.key==="ArrowRight"){i.preventDefault();const b=i.key==="ArrowLeft"?-2:2,B=N+b;B>30&&B<70&&Y(B)}},onFocus:i=>{i.currentTarget.style.background="#1976d2",i.currentTarget.style.outline="2px solid #1976d2"},onBlur:i=>{i.currentTarget.style.background="#e0e0e0",i.currentTarget.style.outline="none"},children:e.jsx("div",{style:{position:"absolute",left:"50%",top:"50%",transform:"translate(-50%, -50%)",height:"30px",width:"4px",background:P?"#1976d2":"#aaa",borderRadius:"2px"}})}),e.jsxs("div",{style:{height:"100%",display:O?"none":"flex",flexDirection:"column",overflow:"hidden",padding:"8px",backgroundColor:"#fafafa",borderLeft:"1px solid #e0e0e0"},children:[e.jsxs("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"center",marginBottom:"12px"},children:[e.jsx(u.default,{variant:"h6",children:"Copilot Assistance"}),e.jsx("button",{onClick:I,"aria-label":"Collapse Copilot assistance panel",title:"Collapse Copilot assistance panel",style:{padding:"3px 6px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",fontSize:"12px",cursor:"pointer"},children:"Collapse"})]}),e.jsxs("div",{style:{flex:1,display:"flex",flexDirection:"column",overflowY:"auto",marginBottom:"16px",padding:"8px",border:"1px solid #e0e0e0",borderRadius:"4px",backgroundColor:"#f9f9f9"},children:[z.length===0&&e.jsx(u.default,{color:"textSecondary",align:"center",style:{marginTop:"20px"},children:"Ask Copilot for help with improving your overview"}),z.map((i,b)=>e.jsx("div",{style:{marginBottom:"10px",textAlign:i.role==="user"?"right":"left"},children:e.jsxs("div",{style:{display:"inline-block",maxWidth:"80%",padding:"10px",borderRadius:"8px",backgroundColor:i.role==="user"?"#1976d2":"#ffffff",color:i.role==="user"?"white":"black",boxShadow:"0 1px 2px rgba(0,0,0,0.1)",border:i.role==="assistant"?"1px solid #e0e0e0":"none"},children:[e.jsx(u.default,{children:i.content}),i.role==="assistant"&&e.jsx("div",{style:{marginTop:"8px",display:"flex",flexWrap:"wrap",gap:"8px"},children:e.jsx("button",{onClick:()=>o(i),style:{padding:"4px 8px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:"pointer",fontSize:"12px"},children:"Apply Suggestion"})})]})},b))]}),e.jsxs("div",{style:{display:"flex",flexDirection:"column",gap:"8px"},children:[e.jsx("textarea",{value:E,onChange:i=>K(i.target.value),onKeyDown:i=>{i.key==="Enter"&&(i.ctrlKey||i.metaKey)&&E.trim()&&(i.preventDefault(),H())},placeholder:"Ask Copilot for help with your overview (e.g., 'Could you suggest a better structure for this overview?'). Press CTRL+ENTER to submit.",style:{width:"100%",padding:"8px",borderRadius:"4px",border:"1px solid #ddd",minHeight:"100px",fontSize:"14px",lineHeight:"1.5",fontFamily:"monospace"}}),e.jsx("button",{onClick:H,disabled:!E.trim(),style:{alignSelf:"flex-end",padding:"8px 16px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:E.trim()?"pointer":"not-allowed",opacity:E.trim()?1:.7},children:"Ask Copilot"})]})]}),O&&e.jsx("div",{style:{position:"absolute",right:"0",top:"50%",transform:"translateY(-50%)",zIndex:1},children:e.jsx("button",{onClick:I,"aria-label":"Open Copilot assistance panel",title:"Open Copilot assistance panel",style:{padding:"8px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px 0 0 4px",cursor:"pointer",boxShadow:"-2px 0 4px rgba(0,0,0,0.1)"},children:"≪ Open Copilot"})})]})]})},ce=({execDoc:t,onSave:r,onLoad:a,onExport:n,autoSaveEnabled:c,onToggleAutoSave:s,autoSaveInterval:y,onChangeAutoSaveInterval:w,recentFiles:x,onOpenRecentFile:p})=>{const l=()=>{t&&r(t)},v=C=>{w(parseInt(C.target.value,10))};return e.jsxs("div",{style:{borderBottom:"1px solid #e0e0e0",paddingBottom:"16px",marginBottom:"16px"},children:[e.jsx(u.default,{variant:"h6",style:{marginBottom:"12px"},children:"File Operations"}),e.jsxs("div",{style:{display:"flex",flexWrap:"wrap",gap:"10px"},children:[e.jsx("button",{onClick:l,disabled:!t,style:{padding:"8px 16px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:t?"pointer":"not-allowed",opacity:t?1:.7},children:"Save to Disk"}),e.jsx("button",{onClick:a,style:{padding:"8px 16px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:"Load from Disk"}),e.jsxs("div",{style:{display:"flex",alignItems:"center"},children:[e.jsxs("label",{style:{marginRight:"8px",display:"flex",alignItems:"center"},children:[e.jsx("input",{type:"checkbox",checked:c,onChange:s,style:{marginRight:"4px"}}),"Auto-save"]}),c&&e.jsxs("select",{value:y,onChange:v,style:{padding:"6px",borderRadius:"4px",border:"1px solid #ddd"},children:[e.jsx("option",{value:30,children:"Every 30 seconds"}),e.jsx("option",{value:60,children:"Every minute"}),e.jsx("option",{value:300,children:"Every 5 minutes"}),e.jsx("option",{value:600,children:"Every 10 minutes"})]})]})]}),e.jsxs("div",{style:{marginTop:"12px"},children:[e.jsx(u.default,{variant:"subtitle2",style:{marginBottom:"8px"},children:"Save as:"}),e.jsx("div",{style:{display:"flex",gap:"8px"},children:e.jsx("button",{onClick:()=>n("markdown"),disabled:!t,style:{padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:t?"pointer":"not-allowed",opacity:t?1:.7},children:"Markdown"})})]}),x.length>0&&e.jsxs("div",{style:{marginTop:"16px"},children:[e.jsx(u.default,{variant:"subtitle2",style:{marginBottom:"8px"},children:"Recent Files:"}),e.jsx("div",{style:{display:"flex",flexWrap:"wrap",gap:"8px"},children:x.map((C,A)=>e.jsx("button",{onClick:()=>p(C),style:{padding:"6px 12px",backgroundColor:"#f5f5f5",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer",textOverflow:"ellipsis",overflow:"hidden",maxWidth:"200px",whiteSpace:"nowrap"},children:C.split("/").pop()},A))})]})]})},pe=({contexts:t,currentContext:r,onChangeContext:a,namespaces:n,currentNamespace:c,onChangeNamespace:s,isAdmin:y})=>{const w=p=>{a(p.target.value)},x=p=>{s(p.target.value)};return e.jsxs("div",{style:{borderBottom:"1px solid #e0e0e0",paddingBottom:"16px",marginBottom:"16px"},children:[e.jsx(u.default,{variant:"h6",style:{marginBottom:"12px"},children:"Kubernetes Context"}),e.jsxs("div",{style:{display:"flex",flexWrap:"wrap",gap:"20px"},children:[e.jsxs("div",{children:[e.jsx("label",{htmlFor:"context-selector",style:{display:"block",marginBottom:"6px"},children:"Context:"}),e.jsx("select",{id:"context-selector",value:r,onChange:w,style:{padding:"8px",minWidth:"200px",borderRadius:"4px",border:"1px solid #ddd"},children:t.map(p=>e.jsxs("option",{value:p,children:[p," ",p===r?"(current)":""]},p))})]}),e.jsxs("div",{children:[e.jsx("label",{htmlFor:"namespace-selector",style:{display:"block",marginBottom:"6px"},children:"Namespace:"}),e.jsx("select",{id:"namespace-selector",value:c,onChange:x,style:{padding:"8px",minWidth:"200px",borderRadius:"4px",border:"1px solid #ddd"},children:n.map(p=>e.jsxs("option",{value:p,children:[p," ",p===c?"(current)":""]},p))})]}),e.jsx("div",{style:{display:"flex",alignItems:"center",marginLeft:"auto"},children:e.jsxs("div",{style:{display:"flex",alignItems:"center",gap:"8px",padding:"8px 12px",backgroundColor:"#f5f5f5",borderRadius:"4px",border:"1px solid #e0e0e0"},children:[e.jsx("span",{style:{width:"10px",height:"10px",borderRadius:"50%",backgroundColor:y?"#4caf50":"#ff9800",display:"inline-block"}}),e.jsx(u.default,{variant:"body2",children:y?"Admin Access":"Standard Access"})]})})]})]})},ue=({open:t,onClose:r})=>{Z({},{enabled:!1});const a={"File Operations":{"Ctrl+S / Cmd+S":"Save document","Ctrl+N / Cmd+N":"Create new document","Ctrl+O / Cmd+O":"Open document"},"Edit Operations":{"Ctrl+Z / Cmd+Z":"Undo","Ctrl+Y / Cmd+Y":"Redo","Ctrl+Shift+Z / Cmd+Shift+Z":"Redo (alternative)","Ctrl+C / Cmd+C":"Copy (when not in input field)","Ctrl+V / Cmd+V":"Paste (when not in input field)","Ctrl+X / Cmd+X":"Cut (when not in input field)","Ctrl+F / Cmd+F":"Find"},"Editor Functions":{F1:"Toggle AI Assistant",F2:"Toggle edit mode",F5:"Run current step"},Navigation:{"Alt+↑":"Focus previous step","Alt+↓":"Focus next step"},"Step Management":{"Ctrl+Alt+N / Cmd+Alt+N":"Add new step","Ctrl+Alt+Delete / Cmd+Alt+Delete":"Delete current step","Ctrl+Alt+↑ / Cmd+Alt+↑":"Move step up","Ctrl+Alt+↓ / Cmd+Alt+↓":"Move step down"}},n=(c,s)=>e.jsxs(g.Box,{sx:{mb:3},children:[e.jsx(g.Typography,{variant:"h6",sx:{mb:2,color:"primary.main"},children:c}),e.jsx(g.Grid,{container:!0,spacing:1,children:Object.entries(s).map(([y,w])=>e.jsx(g.Grid,{item:!0,xs:12,children:e.jsxs(g.Box,{sx:{display:"flex",alignItems:"center",justifyContent:"space-between",py:.5},children:[e.jsx(g.Chip,{label:y,variant:"outlined",size:"small",sx:{fontFamily:"monospace",minWidth:"140px","& .MuiChip-label":{fontSize:"0.75rem"}}}),e.jsx(g.Typography,{variant:"body2",sx:{ml:2,flex:1},children:w})]})},y))}),c!=="Step Management"&&e.jsx(g.Divider,{sx:{mt:2}})]},c);return e.jsxs(g.Dialog,{open:t,onClose:r,maxWidth:"md",fullWidth:!0,PaperProps:{sx:{minHeight:"400px",maxHeight:"80vh"}},children:[e.jsxs(g.DialogTitle,{children:[e.jsx(g.Typography,{variant:"h5",children:"Keyboard Shortcuts"}),e.jsx(g.Typography,{variant:"body2",color:"text.secondary",sx:{mt:1},children:"Available keyboard shortcuts for the ExecDoc Editor"})]}),e.jsx(g.DialogContent,{children:e.jsxs(g.Box,{sx:{mt:1},children:[Object.entries(a).map(([c,s])=>n(c,s)),e.jsx(g.Box,{sx:{mt:3,p:2,bgcolor:"grey.50",borderRadius:1},children:e.jsxs(g.Typography,{variant:"body2",color:"text.secondary",children:[e.jsx("strong",{children:"Note:"})," Copy, Cut, and Paste shortcuts work when focus is not in input fields. Use standard browser shortcuts when editing text in input fields."]})})]})}),e.jsx(g.DialogActions,{children:e.jsx(g.Button,{onClick:r,variant:"contained",children:"Close"})})]})},fe=(t,r="polite")=>{T.useRef(null),T.useEffect(()=>{if(!t.trim())return;let a=document.getElementById("screen-reader-announcements");a?a.setAttribute("aria-live",r):(a=document.createElement("div"),a.id="screen-reader-announcements",a.style.position="absolute",a.style.left="-10000px",a.style.width="1px",a.style.height="1px",a.style.overflow="hidden",a.setAttribute("aria-live",r),a.setAttribute("aria-atomic","true"),document.body.appendChild(a)),a.textContent="",setTimeout(()=>{a.textContent=t},100)},[t,r])},he=()=>{T.useEffect(()=>{let t=document.getElementById("skip-links");if(!t){t=document.createElement("div"),t.id="skip-links",t.style.position="absolute",t.style.top="-40px",t.style.left="6px",t.style.zIndex="9999",t.style.backgroundColor="#000",t.style.color="#fff",t.style.padding="8px",t.style.borderRadius="4px",t.style.transition="top 0.3s";const r=document.createElement("a");r.href="#main-content",r.textContent="Skip to main content",r.style.color="#fff",r.style.textDecoration="none",r.addEventListener("focus",()=>{t.style.top="6px"}),r.addEventListener("blur",()=>{t.style.top="-40px"}),t.appendChild(r),document.body.insertBefore(t,document.body.firstChild)}},[])},R=(t,r)=>{const a=Date.now(),n=Math.random().toString(36).substr(2,9);return`${t}-${a}-${n}`},ee={highContrast:{background:"#ffffff",text:"#000000",primary:"#0066cc",primaryText:"#ffffff",secondary:"#666666",success:"#008000",error:"#cc0000",warning:"#ff8c00",border:"#000000",focus:"#005fcc"},regular:{background:"#ffffff",text:"#212121",primary:"#1976d2",primaryText:"#ffffff",secondary:"#757575",success:"#4caf50",error:"#f44336",warning:"#ff9800",border:"#e0e0e0",focus:"#1976d2"}},ge=()=>{const[t,r]=h.default.useState(!1);h.default.useEffect(()=>{const c=window.matchMedia("(prefers-contrast: high)");r(c.matches);const s=y=>{r(y.matches)};return c.addEventListener("change",s),()=>c.removeEventListener("change",s)},[]);const a=()=>{r(!t)},n=t?ee.highContrast:ee.regular;return{isHighContrast:t,toggleHighContrast:a,colors:n}},xe=({initialDoc:t=null})=>{const[r,a]=h.default.useState(t),[n,c]=h.default.useState(t?"steps":"overview"),[s,y]=h.default.useState(t?"refine-content":"create-overview"),w=()=>{y("implement-content"),c("steps")},x=()=>{y("refine-content"),c("steps")},p=()=>{switch(s){case"create-overview":return"Phase 1: Create & Edit Overview";case"implement-content":return"Phase 2: Implement Content";case"refine-content":return"Phase 3: Refine Content";default:return"Document Authoring"}},[l,v]=h.default.useState([]),[C,A]=h.default.useState(!1),[O,W]=h.default.useState(60),[z,j]=h.default.useState(["default","minikube","docker-desktop"]),[E,K]=h.default.useState("default"),[N,Y]=h.default.useState(["default","kube-system","kube-public"]),[P,G]=h.default.useState("default"),[$,X]=h.default.useState(!1),[H,F]=h.default.useState(!1),[o,m]=h.default.useState(0),{isHighContrast:I,colors:k}=ge(),[i,b]=h.default.useState("");he(),fe(i);const B=h.default.useMemo(()=>R("execdoc-editor"),[]),L=h.default.useMemo(()=>R("main-content"),[]),V=d=>{if(r){const f=d.match(/^# (.+)$/m),D=f?f[1]:r.title;a({...r,title:D,overview:d,updatedAt:new Date})}else{const f=d.match(/^# (.+)$/m),D=f?f[1]:"Untitled Document";a({id:`doc-${Date.now()}`,title:D,overview:d,steps:[],createdAt:new Date,updatedAt:new Date,kubeContext:E,kubeNamespace:P})}},J=()=>{if(!r)return;const d=[{id:`step-${Date.now()}-1`,title:"Setup Environment",description:"Ensure you have the required tools and permissions to proceed.",isExpanded:!0,isCodeBlock:!1},{id:`step-${Date.now()}-2`,title:"Create Configuration",description:"Create the necessary configuration files for your deployment.",isExpanded:!0,isCodeBlock:!0,code:`apiVersion: v1
kind: ConfigMap
metadata:
  name: example-config
data:
  config.json: |
    {
      "key": "value"
    }`},{id:`step-${Date.now()}-3`,title:"Deploy Application",description:"Deploy the application to your Kubernetes cluster.",isExpanded:!0,isCodeBlock:!0,code:"kubectl apply -f deployment.yaml"},{id:`step-${Date.now()}-4`,title:"Verify Deployment",description:"Verify that the deployment was successful.",isExpanded:!0,isCodeBlock:!0,code:`kubectl get pods
kubectl get services`}];a({...r,steps:d,updatedAt:new Date}),w()},U=d=>{r&&(a({...r,steps:r.steps.map(f=>f.id===d.id?d:f),updatedAt:new Date}),s==="implement-content"&&x())},te=d=>{r&&(a({...r,steps:r.steps.map(f=>f.id===d?{...f,executed:!0,executionStatus:"running",executionOutput:"Running command..."}:f)}),setTimeout(()=>{const f=r.steps.find(M=>M.id===d);if(!f)return;const D=Math.random()>.2,ne=D?`Command executed successfully.
${f.code?`> ${f.code}
`:""}Output: Operation completed.`:`Error executing command.
${f.code?`> ${f.code}
`:""}Error: Could not complete the operation in context "${E}".`;a({...r,steps:r.steps.map(M=>M.id===d?{...M,executed:!0,executionStatus:D?"success":"failure",executionOutput:ne}:M)})},1500))},re=d=>{alert(`Doc would be saved as: ${d.title}.md`),l.includes(`/home/user/documents/${d.title}.md`)||v([`/home/user/documents/${d.title}.md`,...l.slice(0,4)])},oe=()=>{alert("In a full implementation, a file picker would open here.")},ve=d=>{r&&alert(`Doc would be saved as: ${r.title}.${d}`)};Z({onSave:()=>{r&&(re(r),b(`Document "${r.title}" saved successfully.`))},onNew:()=>{a(null),c("overview"),y("create-overview"),m(0),b("New document created. Focus moved to overview editing.")},onOpen:()=>{oe(),b("Opening file browser for document selection.")},onNewStep:()=>{if(!r)return;const d={id:`step-${Date.now()}`,title:"New Step",description:"",isExpanded:!0,isCodeBlock:!1};a({...r,steps:[...r.steps,d],updatedAt:new Date});const f=r.steps.length;m(f),b(`New step added. Focus moved to step ${f+1}: ${d.title}.`)},onDeleteStep:()=>{if(!r||r.steps.length===0)return;const d=r.steps[o];if(d&&window.confirm(`Are you sure you want to delete "${d.title}"?`)){const f=r.steps.filter((ne,M)=>M!==o);a({...r,steps:f,updatedAt:new Date});const D=Math.max(0,Math.min(o,f.length-1));m(D),b(`Step "${d.title}" deleted. ${f.length>0?`Focus moved to step ${D+1}.`:"No steps remaining."}`)}},onMoveStepUp:()=>{if(!r||o<=0)return;const d=r.steps[o],f=[...r.steps];[f[o-1],f[o]]=[f[o],f[o-1]],a({...r,steps:f,updatedAt:new Date}),m(o-1),b(`Step "${d.title}" moved up to position ${o}.`)},onMoveStepDown:()=>{if(!r||o>=r.steps.length-1)return;const d=r.steps[o],f=[...r.steps];[f[o],f[o+1]]=[f[o+1],f[o]],a({...r,steps:f,updatedAt:new Date}),m(o+1),b(`Step "${d.title}" moved down to position ${o+2}.`)},onFocusNextStep:()=>{if(!r||r.steps.length===0)return;const d=Math.min(o+1,r.steps.length-1);m(d),b(`Focus moved to step ${d+1}: ${r.steps[d].title}.`)},onFocusPrevStep:()=>{if(!r||r.steps.length===0)return;const d=Math.max(o-1,0);m(d),b(`Focus moved to step ${d+1}: ${r.steps[d].title}.`)},onRunCurrent:()=>{if(!r||r.steps.length===0)return;const d=r.steps[o];d&&(te(d.id),b(`Executing step "${d.title}".`))},onToggleAssistant:()=>{F(!H)}});const be=()=>e.jsx(le,{initialOverview:(r==null?void 0:r.overview)||"",onSaveOverview:V,onGenerateSteps:J,authoringPhase:s}),we=()=>r?e.jsxs("div",{children:[e.jsx(u.default,{variant:"h4",style:{marginBottom:"24px"},children:r.title}),e.jsxs("div",{style:{marginBottom:"24px"},children:[e.jsxs("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"center",paddingBottom:"8px",borderBottom:"1px solid #e0e0e0",marginBottom:"12px"},children:[e.jsx(u.default,{variant:"h6",children:"Overview"}),e.jsx("button",{onClick:()=>c("overview"),style:{padding:"6px 12px",backgroundColor:"#f0f0f0",border:"1px solid #ddd",borderRadius:"4px",cursor:"pointer"},children:"Edit Overview"})]}),e.jsx("div",{style:{padding:"16px",backgroundColor:"#f9f9f9",borderRadius:"4px",marginBottom:"24px",maxHeight:"200px",overflowY:"auto"},children:r.overview.split(`
`).map((d,f)=>d.startsWith("# ")?null:d.startsWith("## ")?e.jsx(u.default,{variant:"h6",style:{marginTop:"16px",marginBottom:"8px"},children:d.substring(3)},f):d.startsWith("- ")?e.jsx(u.default,{component:"li",style:{marginLeft:"20px",marginBottom:"4px"},children:d.substring(2)},f):d===""?e.jsx("br",{},f):e.jsx(u.default,{paragraph:!0,children:d},f))})]}),e.jsx(u.default,{variant:"h6",style:{marginBottom:"16px"},children:"Steps"}),r.steps.length===0?e.jsx(u.default,{color:"textSecondary",children:"No steps defined yet."}):r.steps.map((d,f)=>e.jsx("div",{onClick:()=>m(f),onKeyDown:D=>{(D.key==="Enter"||D.key===" ")&&(D.preventDefault(),m(f))},tabIndex:0,role:"button","aria-label":`Focus step ${f+1}: ${d.title}`,style:{cursor:"pointer"},children:e.jsx(de,{step:d,onStepChange:U,onRunStep:te,currentContext:E,currentNamespace:P,isFocused:f===o})},d.id))]}):e.jsx("div",{style:{textAlign:"center",padding:"40px"},children:e.jsx(u.default,{children:"No document loaded. Create a new one first."})});return e.jsxs("div",{id:B,role:"application","aria-label":"Executable Document Editor",style:{height:"100%",display:"flex",flexDirection:"column",backgroundColor:k.background,color:k.text},children:[e.jsxs("header",{role:"banner",style:{padding:"16px"},children:[e.jsxs("div",{role:"status","aria-live":"polite",style:{marginBottom:"16px",padding:"8px 12px",backgroundColor:I?k.background:"#e3f2fd",borderRadius:"4px",border:`1px solid ${I?k.border:"#bbdefb"}`,color:k.text},children:[e.jsx(u.default,{variant:"subtitle1",style:{fontWeight:"bold",color:k.text},children:p()}),e.jsxs("div",{style:{display:"flex",marginTop:"8px",justifyContent:"space-between",flexWrap:"wrap"},children:[e.jsxs("div",{style:{display:"flex",alignItems:"center",margin:"4px 0"},children:[e.jsx("div",{style:{width:"16px",height:"16px",borderRadius:"50%",backgroundColor:s==="create-overview"?"#1976d2":"#ddd",marginRight:"8px"}}),e.jsx(u.default,{variant:"body2",children:"Create Overview"})]}),e.jsxs("div",{style:{display:"flex",alignItems:"center",margin:"4px 0"},children:[e.jsx("div",{style:{width:"16px",height:"16px",borderRadius:"50%",backgroundColor:s==="implement-content"?"#1976d2":"#ddd",marginRight:"8px"}}),e.jsx(u.default,{variant:"body2",children:"Implement Content"})]}),e.jsxs("div",{style:{display:"flex",alignItems:"center",margin:"4px 0"},children:[e.jsx("div",{style:{width:"16px",height:"16px",borderRadius:"50%",backgroundColor:s==="refine-content"?"#1976d2":"#ddd",marginRight:"8px"}}),e.jsx(u.default,{variant:"body2",children:"Refine Content"})]})]})]}),e.jsx("nav",{role:"navigation","aria-label":"Kubernetes context selection",children:e.jsx(pe,{contexts:z,currentContext:E,onChangeContext:K,namespaces:N,currentNamespace:P,onChangeNamespace:G,isAdmin:$})}),n==="steps"&&e.jsx("div",{role:"region","aria-label":"File operations",children:e.jsx(ce,{execDoc:r,onSave:re,onLoad:oe,onExport:ve,autoSaveEnabled:C,onToggleAutoSave:()=>A(d=>!d),autoSaveInterval:O,onChangeAutoSaveInterval:W,recentFiles:l,onOpenRecentFile:d=>alert(`Would open: ${d}`)})}),r&&e.jsx("div",{role:"tablist","aria-label":"Document view selection",style:{marginBottom:"16px"},children:e.jsxs("div",{style:{display:"flex"},children:[e.jsx("button",{role:"tab","aria-selected":n==="overview","aria-controls":L,onClick:()=>{c("overview"),b("Switched to overview view.")},style:{flex:1,padding:"8px",backgroundColor:n==="overview"?k.primary:"#f1f1f1",color:n==="overview"?k.primaryText:k.text,border:`1px solid ${k.border}`,borderRadius:"4px 0 0 4px",cursor:"pointer",fontWeight:n==="overview"?"bold":"normal"},children:"Document Overview"}),e.jsx("button",{role:"tab","aria-selected":n==="steps","aria-controls":L,onClick:()=>{c("steps"),b("Switched to steps view.")},style:{flex:1,padding:"8px",backgroundColor:n==="steps"?k.primary:"#f1f1f1",color:n==="steps"?k.primaryText:k.text,border:`1px solid ${k.border}`,borderRadius:"0 4px 4px 0",cursor:"pointer",fontWeight:n==="steps"?"bold":"normal"},children:"Document Steps"})]})})]}),e.jsx("main",{id:L,role:"main","aria-label":`${n==="overview"?"Document overview":"Document steps"} content`,tabIndex:-1,style:{flex:1,padding:"0 16px 16px",overflowY:"auto",backgroundColor:k.background,color:k.text},children:n==="overview"?be():we()}),e.jsx(g.Box,{sx:{position:"fixed",bottom:16,right:16},children:e.jsx(g.Tooltip,{title:"Keyboard Shortcuts Help (Press F1 or click)",children:e.jsx(g.IconButton,{onClick:()=>{F(!0),b("Keyboard shortcuts help dialog opened.")},"aria-label":"Open keyboard shortcuts help","aria-keyshortcuts":"F1",sx:{backgroundColor:I?k.primary:"primary.main",color:k.primaryText,border:I?`2px solid ${k.border}`:"none","&:hover":{backgroundColor:I?k.secondary:"primary.dark"},"&:focus":{outline:`2px solid ${k.focus}`,outlineOffset:"2px"}},children:e.jsx(se,{"aria-hidden":"true"})})})}),e.jsx(ue,{open:H,onClose:()=>{F(!1),b("Keyboard shortcuts help dialog closed.")}})]})};S.registerRoute({path:"/exec-doc-editor",sidebar:{item:"exec-doc-editor",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"exec-doc-editor",exact:!0,component:()=>e.jsx(q.SectionBox,{title:"Executable Document Editor",textAlign:"left",paddingTop:2,children:e.jsx(xe,{})})}),S.registerSidebarEntry({name:"exec-doc-editor",label:"Exec Doc Editor",url:"/exec-doc-editor",icon:"mdi:file-document-edit",sidebar:"Innovation-engine"}),S.registerSidebarEntry({name:"architect",label:"Architect",url:"/exec-doc-editor",icon:"mdi:code-braces-box",sidebar:"Innovation-engine"});function ye(){const[t,r]=T.useState(""),[a,n]=T.useState(""),[c,s]=T.useState(!1),[y,w]=T.useState(null),[x,p]=T.useState(!1),l=async v=>{if(v.preventDefault(),!t.trim()){w("Please enter a topic to generate an overview"),p(!0);return}s(!0),w(null);try{const C=await fetch(`${_.serverBaseUrl}/api/overview`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({topic:t})});if(!C.ok){const O=await C.json();throw new Error(O.error||"Failed to generate overview")}const A=await C.json();n(A.overview||"No overview generated")}catch(C){w(C.message||"Failed to generate overview"),p(!0)}finally{s(!1)}};return e.jsxs(g.Box,{p:2,children:[e.jsx(g.Typography,{variant:"h4",gutterBottom:!0,children:"Azure Architecture Overview Generator"}),e.jsx(g.Typography,{variant:"body1",paragraph:!0,children:"Enter an Azure workload or solution to generate a comprehensive architectural overview."}),e.jsx(g.Card,{children:e.jsx(g.CardContent,{children:e.jsx("form",{onSubmit:l,children:e.jsxs(g.Grid,{container:!0,spacing:2,children:[e.jsx(g.Grid,{item:!0,xs:12,children:e.jsx(g.TextField,{fullWidth:!0,label:"Workload or Solution",value:t,onChange:v=>r(v.target.value),placeholder:"E.g., Web Application with SQL Database, Microservices Architecture, etc.",disabled:c})}),e.jsx(g.Grid,{item:!0,xs:12,children:e.jsx(g.Button,{type:"submit",variant:"contained",color:"primary",disabled:c,children:c?e.jsx(g.CircularProgress,{size:24}):"Generate Overview"})})]})})})}),a&&e.jsx(g.Card,{style:{marginTop:16},children:e.jsxs(g.CardContent,{children:["              ",e.jsxs(g.Typography,{variant:"h5",gutterBottom:!0,children:["Azure Architecture Overview: ",t]}),e.jsx(g.Box,{style:{whiteSpace:"pre-wrap",backgroundColor:"#f5f5f5",padding:16,borderRadius:4},children:e.jsx(g.Typography,{variant:"body1",children:a})})]})}),e.jsx(g.Snackbar,{open:x,autoHideDuration:6e3,onClose:()=>p(!1),children:e.jsx(g.Alert,{onClose:()=>p(!1),severity:"error",children:y})})]})}S.registerSidebarEntry({name:"mypluginsidebar",label:"Getting Started",url:"/getting-started",icon:"mdi:comment-quote",sidebar:"HOME"}),S.registerRoute({path:"/getting-started",sidebar:{item:"getting-started",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"getting-started",exact:!0,component:()=>{const t=()=>{window.location.hash="#/shell-exec",setTimeout(()=>{window.dispatchEvent(new CustomEvent("prefill-innovation-engine-command",{detail:"ie execute ../../../scenarios/testing/variableHierarchy.md"}))},100)};return e.jsxs(q.SectionBox,{title:"Getting Started",textAlign:"center",paddingTop:2,children:[e.jsx(u.default,{children:"This is where Innovation Engine lives"}),e.jsx("br",{}),e.jsx("a",{href:"#",onClick:r=>{r.preventDefault(),t()},style:{fontWeight:"bold",color:"#1976d2",textDecoration:"underline",cursor:"pointer"},children:"Test Innovation Engine"})]})}}),S.registerSidebarEntry({name:"backtohome",label:"Back to Home",url:"/",icon:"mdi:hexagon",sidebar:"Innovation-engine"}),S.registerSidebarEntry({name:"getting-started",label:"Getting Started",url:"/getting-started",icon:"mdi:comment-quote",sidebar:"Innovation-engine"}),S.registerRoute({path:"/shell-exec",sidebar:{item:"shell-exec",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"shell-exec",exact:!0,component:()=>{const[t,r]=h.default.useState("ie execute "),[a,n]=h.default.useState(""),[c,s]=h.default.useState(""),[y,w]=h.default.useState(!1);h.default.useEffect(()=>{const p=l=>{l.detail&&r(l.detail)};return window.addEventListener("prefill-innovation-engine-command",p),()=>window.removeEventListener("prefill-innovation-engine-command",p)},[]);const x=async()=>{w(!0),n(""),s("");try{const p=await fetch("http://localhost:4000/api/exec",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({command:t})}),l=await p.json();p.ok?n(`stdout:
${l.stdout}
stderr:
${l.stderr}
exitCode: ${l.exitCode}`):s(l.error||"Unknown error")}catch(p){s(p.message)}finally{w(!1)}};return e.jsxs(q.SectionBox,{title:"Innovation Engine",textAlign:"center",paddingTop:2,children:[e.jsx(u.default,{children:"Enter an allowlisted shell command (e.g., ie):"}),e.jsx("input",{type:"text",value:t,onChange:p=>r(p.target.value),onKeyDown:p=>{p.key==="Enter"&&!y&&x()},style:{width:"60%",margin:"1em 0",padding:"0.5em"}}),e.jsx("br",{}),e.jsx("button",{onClick:x,disabled:y,style:{padding:"0.5em 1em"},children:y?"Running...":"Execute"}),e.jsx("pre",{style:{textAlign:"left",marginTop:"1em",background:"#f5f5f5",padding:"1em"},children:a}),c&&e.jsxs(u.default,{color:"error",children:["Error: ",c]})]})}}),S.registerSidebarEntry({name:"shell-exec",label:"Innovation Engine",url:"/shell-exec",icon:"mdi:console",sidebar:"Innovation-engine"}),S.registerSidebarEntry({name:"assistant",label:"Assistant",url:"/assistant",icon:"mdi:robot",sidebar:"Innovation-engine"}),S.registerRoute({path:"/assistant",sidebar:{item:"assistant",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"assistant",exact:!0,component:()=>{const[t,r]=h.default.useState(""),[a,n]=h.default.useState([{role:"assistant",content:"Hello! I'm the Innovation Engine Assistant. How can I help you with your Kubernetes or Executable Document needs?"}]),[c,s]=h.default.useState(!1),[y,w]=h.default.useState(""),x=h.default.useRef(null);h.default.useEffect(()=>{x.current&&(x.current.scrollTop=x.current.scrollHeight)},[a]);const p=async()=>{if(!t.trim())return;const l=t;n(v=>[...v,{role:"user",content:l}]),s(!0),r("");try{const v=await fetch("http://localhost:4000/api/assistant",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({messages:a.concat({role:"user",content:l})})});if(!v.ok)throw new Error(`Error: ${v.status} ${v.statusText}`);const C=await v.json();n(A=>[...A,{role:"assistant",content:C.response}])}catch(v){console.error("Error communicating with Azure AI:",v),w(v.message||"Failed to communicate with the assistant service"),n(C=>[...C,{role:"assistant",content:"I'm sorry, I encountered an error while processing your request. Please try again later."}])}finally{s(!1)}};return e.jsxs(q.SectionBox,{title:"Innovation Engine Assistant",textAlign:"left",paddingTop:2,children:[e.jsxs("div",{ref:x,style:{height:"400px",overflowY:"auto",marginBottom:"20px",padding:"10px",border:"1px solid #e0e0e0",borderRadius:"4px",backgroundColor:"#f9f9f9"},children:[a.map((l,v)=>e.jsx("div",{style:{marginBottom:"10px",textAlign:l.role==="user"?"right":"left"},children:e.jsx("div",{style:{display:"inline-block",maxWidth:"80%",padding:"10px",borderRadius:"8px",backgroundColor:l.role==="user"?"#1976d2":"#ffffff",color:l.role==="user"?"white":"black",boxShadow:"0 1px 2px rgba(0,0,0,0.1)",border:l.role==="assistant"?"1px solid #e0e0e0":"none"},children:e.jsx(u.default,{children:l.content})})},v)),c&&e.jsx("div",{style:{textAlign:"center",padding:"10px"},children:e.jsx(u.default,{color:"textSecondary",children:"Processing your request..."})})]}),e.jsxs("div",{style:{display:"flex",alignItems:"flex-start",gap:"10px"},children:[e.jsx("textarea",{value:t,onChange:l=>r(l.target.value),onKeyDown:l=>{l.key==="Enter"&&!l.shiftKey&&(l.preventDefault(),p())},placeholder:"Enter your question or request here (e.g., 'Create a deployment for my app')",style:{flexGrow:1,padding:"10px",borderRadius:"4px",border:"1px solid #ccc",minHeight:"100px",resize:"vertical",fontFamily:"inherit",fontSize:"14px"}}),e.jsx("button",{onClick:p,disabled:c||!t.trim(),style:{padding:"10px 20px",backgroundColor:"#1976d2",color:"white",border:"none",borderRadius:"4px",cursor:c||!t.trim()?"not-allowed":"pointer",opacity:c||!t.trim()?.7:1},children:"Send"})]}),e.jsxs("div",{style:{marginTop:"20px",borderTop:"1px solid #e0e0e0",paddingTop:"20px"},children:[e.jsx(u.default,{variant:"h6",children:"Quick Start:"}),e.jsx("div",{style:{display:"flex",flexWrap:"wrap",gap:"10px",marginTop:"10px"},children:["Create a simple deployment","Expose a service","Author an Executable Document","Learn about Kubernetes basics"].map((l,v)=>e.jsx("button",{onClick:()=>r(l),style:{padding:"8px 12px",backgroundColor:"#f1f1f1",border:"1px solid #ddd",borderRadius:"16px",cursor:"pointer"},children:l},v))}),e.jsxs("div",{style:{marginTop:"20px",textAlign:"center",padding:"15px",backgroundColor:"#e8f5e9",borderRadius:"8px"},children:[e.jsx(u.default,{variant:"subtitle1",style:{marginBottom:"8px"},children:"Try our new Exec Doc Editor!"}),e.jsx(u.default,{variant:"body2",style:{marginBottom:"12px"},children:"The new Executable Document Editor provides a more powerful interface for authoring and editing Exec Docs."}),e.jsx("a",{href:"#/exec-doc-editor",style:{display:"inline-block",padding:"8px 16px",backgroundColor:"#4caf50",color:"white",textDecoration:"none",borderRadius:"4px",fontWeight:"bold"},children:"Open Exec Doc Editor"})]})]})]})}}),S.registerSidebarEntry({name:"overview-generator",label:"Azure Architecture",url:"/overview-generator",icon:"mdi:cloud-outline",sidebar:"Innovation-engine"}),S.registerRoute({path:"/overview-generator",sidebar:{item:"overview-generator",sidebar:"Innovation-engine"},useClusterURL:!1,noAuthRequired:!0,name:"overview-generator",exact:!0,component:ye})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
